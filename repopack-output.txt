This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-30T16:19:25.089Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
public/
  images/
    logo.svg
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    (auth)/
      sign-in/
        [[...sign-in]]/
          page.tsx
      sign-up/
        [[...sign-up]]/
          page.tsx
    (dashboard)/
      dashboard/
        analytics/
          page.tsx
        events/
          [eventId]/
            edit/
              loading.tsx
              page.tsx
            loading.tsx
            page.tsx
          create/
            loading.tsx
            page.tsx
          page.tsx
        invite/
          [eventId]/
            [response]/
              page.tsx
            thank-you/
              page.tsx
        settings/
          page.tsx
        page.tsx
      layout.tsx
    api/
      events/
        [eventId]/
          guests/
            route.ts
          messages/
            route.ts
          route.ts
        route.ts
      invitations/
        [eventId]/
          rsvp/
            route.ts
        route.ts
      settings/
        route.ts
    components/
      DeleteEventButton.tsx
      EventCalendar.tsx
      EventChat.tsx
      EventDetails.tsx
      EventHeader.tsx
      GuestChat.tsx
      GuestList.tsx
      GuestManagement.tsx
      InviteGuests.tsx
      SocialShare.tsx
      StatCard.tsx
      VenueMap.tsx
    lib/
      calendar/
        index.ts
      email/
        templates.ts
      analytics.ts
      db.ts
      email.ts
      mongodb.ts
    types/
      events.ts
      settings.ts
    utils/
      eventUtils.ts
    globals.css
    layout.tsx
    page.tsx
  middleware.ts
.gitignore
next.config.ts
package.json
postcss.config.mjs
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: public/images/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48"><g data-name="08-party spray"><path d="M19 10v1H5v-1a2.006 2.006 0 0 1 2-2h10a2.006 2.006 0 0 1 2 2z" style="fill:#64e1dc"/><path d="M17 8H7a2.006 2.006 0 0 0-2 2v1a2.006 2.006 0 0 1 2-2h10a2.006 2.006 0 0 1 2 2v-1a2.006 2.006 0 0 0-2-2z" style="fill:#b4f5f0"/><path d="m15.57 29-1.07-3-2.5-7-2.5 7-1.07 3L7 33a2.015 2.015 0 0 0-2 2 2.006 2.006 0 0 0 2 2h10a2.015 2.015 0 0 0 2-2 2.006 2.006 0 0 0-2-2zM23 13v32a2.006 2.006 0 0 1-2 2H3a2.006 2.006 0 0 1-2-2V13a2.006 2.006 0 0 1 2-2h18a2.006 2.006 0 0 1 2 2z" style="fill:#b674f2"/><path d="M21 45H3a2.006 2.006 0 0 1-2-2v2a2.006 2.006 0 0 0 2 2h18a2.006 2.006 0 0 0 2-2v-2a2.006 2.006 0 0 1-2 2z" style="fill:#8f4cd6"/><path d="M21 11H3a2.006 2.006 0 0 0-2 2v2a2.006 2.006 0 0 1 2-2h18a2.006 2.006 0 0 1 2 2v-2a2.006 2.006 0 0 0-2-2z" style="fill:#d2a0f5"/><path d="M18.123 32.185 13.413 19a1.5 1.5 0 0 0-2.826 0L5.878 32.181a3.342 3.342 0 0 0-1.335.834A3.442 3.442 0 0 0 3.5 35.5 3.5 3.5 0 0 0 7 39h10a3.513 3.513 0 0 0 3.5-3.5 3.5 3.5 0 0 0-2.377-3.315z" style="fill:#a260e5"/><path d="M17 33a2.006 2.006 0 0 1 2 2 2.015 2.015 0 0 1-2 2H7a2.006 2.006 0 0 1-2-2 2.015 2.015 0 0 1 2-2z" style="fill:#bdf052"/><path style="fill:#ff73a5" d="M15.57 29 17 33H7l1.43-4h7.14z"/><path style="fill:#bdf052" d="m14.5 26 1.07 3H8.43l1.07-3h5z"/><path style="fill:#ff73a5" d="m12 19 2.5 7h-5l2.5-7z"/><path d="M18.41 34.41A1.955 1.955 0 0 1 17 35H7a2 2 0 0 1-1.721-1A1.963 1.963 0 0 0 5 35a2.006 2.006 0 0 0 2 2h10a1.984 1.984 0 0 0 1.721-3 1.938 1.938 0 0 1-.311.41z" style="fill:#93d632"/><path style="fill:#ff8fb8" d="M12 32h4.643l-1.073-3H12v3z"/><path style="fill:#ff73a5" d="M16.643 32H12v1h5l-.357-1z"/><path style="fill:#ff468c" d="M7.357 32 7 33h5v-1H7.357z"/><path style="fill:#d7fa78" d="M12 29h3.57l-1.07-3H12v3z"/><path style="fill:#ff8fb8" d="M14.5 26 12 19v7h2.5z"/><path style="fill:#ff73a5" d="M9 1h6v7H9z"/><path style="fill:#ff468c" d="M9 6h6v2H9z"/><path style="fill:#be1964" d="M11 3h2v2h-2z"/><path style="fill:#ff468c" d="M11 5h2v1h-2z"/><path style="fill:#d72878" d="M9 7h6v1H9z"/><path style="fill:#ffa1c8" d="m9 1 1 1h4l1-1H9z"/><path d="M21 13H3.154a28.829 28.829 0 0 0 4.834 13.274L10.587 19a1.5 1.5 0 0 1 2.826 0l4.71 13.189a3.444 3.444 0 0 1 2.2 4.365q1.306.575 2.677 1.022V15a2.006 2.006 0 0 0-2-2z" style="fill:#c78ff5"/><path d="M5 13h16a2.006 2.006 0 0 1 2 2v-2a2.006 2.006 0 0 0-2-2H3.025c.023.672.061 1.34.129 2z" style="fill:#e0b8ff"/><path d="M18.123 32.185 13.413 19a1.5 1.5 0 0 0-2.826 0l-2.6 7.278c.3.446.621.881.947 1.309L9.5 26l2.5-7 2.5 7 1.07 3 1.073 3L17 33a2 2 0 0 1 1.908 1.434c.007.023.015.045.021.068A1.951 1.951 0 0 1 19 35a1.979 1.979 0 0 1-.186.831c.5.253 1 .494 1.509.719a3.444 3.444 0 0 0-2.2-4.365z" style="fill:#b674f2"/><rect x="12" y="12" width="6" height="1" rx=".5" ry=".5" style="fill:#f5e1ff"/><path d="M18.5 12.5a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 0-1h-1a.5.5 0 0 0-.5.5z" style="fill:#f5e1ff"/><rect x="4" y="45" width="6" height="1" rx=".5" ry=".5" style="fill:#613394"/><path d="M10.5 45.5a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 0-1h-1a.5.5 0 0 0-.5.5z" style="fill:#613394"/><ellipse cx="19.003" cy="15.987" rx="1.642" ry="2.286" transform="rotate(-45.02 19.003 15.987)" style="fill:#f6fafd"/><ellipse cx="20" cy="20" rx=".825" ry="1.148" transform="rotate(-45.02 20 20)" style="fill:#f6fafd"/><ellipse cx="17.746" cy="18.5" rx=".413" ry=".574" transform="rotate(-45.02 17.746 18.5)" style="fill:#f6fafd"/><path style="fill:#ffa426" d="m47 6-1.2 1.8L47 10l-3-1-3 1 1.2-2.2L41 6h2l1-2 1 2h2z"/><path transform="rotate(-45 41 19)" style="fill:#64e1dc" d="M38.879 16.879h4.243v4.243h-4.243z"/><path style="fill:#00c8c8" d="m41 20-2-2-1 1 3 3 3-3-1-1-2 2z"/><path style="fill:#ff73a5" d="m39 25-1.2 1.8L39 29l-3-1-3 1 1.2-2.2L33 25h2l1-2 1 2h2z"/><circle cx="35" cy="3" r="2" style="fill:#bdf052"/><circle cx="28" cy="22" r="2" style="fill:#64e1dc"/><path style="fill:#ff73a5" d="M23 7h11v2H23z"/><path style="fill:#64e1dc" d="M36 7h2v2h-2z"/><path d="m31.43 2.9-.86-1.8c-.567.27-1.214.541-1.921.806l.7 1.873A25.472 25.472 0 0 0 31.43 2.9z" style="fill:#a7e340"/><path d="M26.7 2.586A34.77 34.77 0 0 1 18 4v2a36.606 36.606 0 0 0 9.3-1.506z" style="fill:#e991f5"/><path d="M38.277 14.948c-1.5-1.167-2.911-2.263-4.659-2.43a5.358 5.358 0 0 0-1.425-1.508c-1.232-.956-3.739-1.029-6.646-1.011H25v2h.555c1.5-.01 4.625-.02 5.409.589.08.062.145.117.212.172a4.505 4.505 0 0 0-2.309 1.524 2.3 2.3 0 0 0-.5 1.858 2.388 2.388 0 0 0 1.67 1.758 2.413 2.413 0 0 0 .684.1 2.874 2.874 0 0 0 1.771-.666 3.4 3.4 0 0 0 1.5-2.713 10.346 10.346 0 0 1 3.056 1.906l.341.266 1.226-1.58zm-6.287-.315a1.637 1.637 0 0 1-.73 1.124.779.779 0 0 1-.658.223.444.444 0 0 1-.271-.226c0-.019.014-.106.137-.271a2.657 2.657 0 0 1 1.523-.877z" style="fill:#d2a0f5"/><circle cx="35" cy="3" r="1" style="fill:#a7e340"/><circle cx="28" cy="22" r="1" style="fill:#b4f5f0"/><path d="M21 10h-1a3 3 0 0 0-3-3h-1V1a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v6H7a3 3 0 0 0-3 3H3a3 3 0 0 0-3 3v28h2V13a1 1 0 0 1 1-1h18a1 1 0 0 1 1 1v2h2v-2a3 3 0 0 0-3-3zM10 2h4v5h-4zm-4 8a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1z"/><path d="M22 45a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-2H0v2a3 3 0 0 0 3 3h18a3 3 0 0 0 3-3V21h-2zM22 17h2v2h-2zM11 3h2v2h-2z"/><path d="M17 38a2.994 2.994 0 0 0 .742-5.9l-4.8-13.44a1 1 0 0 0-1.884 0l-4.8 13.44A2.994 2.994 0 0 0 7 38zm-7.867-8h5.734l.714 2H8.419zm5.019-2h-4.3l.357-1H13.8zM12 21.973 13.081 25h-2.162zM6 35a1 1 0 0 1 1-1h10a1 1 0 0 1 0 2H7a1 1 0 0 1-1-1zM39.882 24.528A1 1 0 0 0 39 24h-1.382l-.718-1.447a1.042 1.042 0 0 0-1.79 0L34.382 24H33a1 1 0 0 0-.832 1.555l.865 1.3-.911 1.669a1 1 0 0 0 1.194 1.428l2.684-.9 2.684.9A1.014 1.014 0 0 0 39 30a1 1 0 0 0 .878-1.479l-.911-1.669.865-1.3a1 1 0 0 0 .05-1.024zm-2.914 1.717a1 1 0 0 0-.062 1l-.59-.2a1 1 0 0 0-.632 0l-.59.2a1 1 0 0 0-.062-1L34.869 26H35a1 1 0 0 0 .9-.553l.1-.211.1.211A1 1 0 0 0 37 26h.131zM46.967 7.852l.865-1.3A1 1 0 0 0 47 5h-1.382L44.9 3.553a1.042 1.042 0 0 0-1.79 0L42.382 5H41a1 1 0 0 0-.832 1.555l.865 1.3-.911 1.669a1 1 0 0 0 1.194 1.428L44 10.054l2.684.895A1.014 1.014 0 0 0 47 11a1 1 0 0 0 .878-1.479zm-2-.607a1 1 0 0 0-.062 1l-.59-.2a1 1 0 0 0-.632 0l-.59.2a1 1 0 0 0-.062-1L42.869 7H43a1 1 0 0 0 .9-.553l.1-.211.1.211A1 1 0 0 0 45 7h.131zM35 6a3 3 0 1 0-3-3 3 3 0 0 0 3 3zm0-4a1 1 0 1 1-1 1 1 1 0 0 1 1-1zM28 19a3 3 0 1 0 3 3 3 3 0 0 0-3-3zm0 4a1 1 0 1 1 1-1 1 1 0 0 1-1 1zM23 7h2v2h-2zM27 7h7v2h-7zM36 7h2v2h-2zM31.426 2.905 30.574 1.1a27.38 27.38 0 0 1-1.931.815l.713 1.869a31.253 31.253 0 0 0 2.07-.879zM26.7 2.587A34.13 34.13 0 0 1 18 4v2a36.459 36.459 0 0 0 9.3-1.507zM32.193 11.006c-1.224-.953-3.727-1.021-6.628-1.007H25v2h.574c1.5 0 4.612-.02 5.39.586.078.06.149.117.215.17a4.519 4.519 0 0 0-2.306 1.524 2.3 2.3 0 0 0-.5 1.872A2.411 2.411 0 0 0 30.713 18a2.876 2.876 0 0 0 1.773-.666 3.394 3.394 0 0 0 1.506-2.723 10.415 10.415 0 0 1 3.071 1.928l.323.252 1.228-1.579-.319-.249c-1.5-1.173-2.919-2.283-4.654-2.45a5.441 5.441 0 0 0-1.448-1.507zm-.2 3.625a1.65 1.65 0 0 1-.743 1.13.768.768 0 0 1-.647.222.464.464 0 0 1-.268-.224c0-.029.017-.119.134-.274a2.651 2.651 0 0 1 1.524-.883zM41.707 15.293a1 1 0 0 0-1.414 0l-3 3a1 1 0 0 0 0 1.414l3 3a1 1 0 0 0 1.414 0l3-3a1 1 0 0 0 0-1.414zM41 20.586 39.414 19 41 17.414 42.586 19z"/></g></svg>

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/(auth)/sign-in/[[...sign-in]]/page.tsx
================
import { SignIn } from '@clerk/nextjs'

export default function Page() {
  return <SignIn />
}

================
File: src/app/(auth)/sign-up/[[...sign-up]]/page.tsx
================
import { SignUp } from '@clerk/nextjs'

export default function Page() {
  return <SignUp />
}

================
File: src/app/(dashboard)/dashboard/analytics/page.tsx
================
import { getEventStats } from '@/app/lib/analytics';
import StatCard from '@/app/components/StatCard';

export default async function AnalyticsPage() {
  const stats = await getEventStats();

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <h1 className="text-2xl font-bold text-gray-900 mb-6">Analytics</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <StatCard
          title="Total Events"
          value={stats.totalEvents}
          trend={stats.eventsTrend}
        />
        <StatCard
          title="Total Attendees"
          value={stats.totalAttendees}
          trend={stats.attendeesTrend}
        />
        <StatCard
          title="Revenue"
          value={stats.totalRevenue}
          trend={stats.revenueTrend}
          format="currency"
        />
      </div>

      {/* You can add more sections here, such as charts or detailed statistics */}
    </div>
  );
}

================
File: src/app/(dashboard)/dashboard/events/[eventId]/edit/loading.tsx
================
export default function LoadingEditEvent() {
    return (
      <div className="max-w-2xl mx-auto p-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/4 mb-8"></div>
          <div className="space-y-6">
            {[1, 2, 3, 4, 5].map((i) => (
              <div key={i} className="h-10 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
}

================
File: src/app/(dashboard)/dashboard/events/[eventId]/edit/page.tsx
================
'use client';

import { useState, useEffect, use, Suspense } from 'react';
import { useRouter } from 'next/navigation';
import { ClerkProvider, useAuth } from '@clerk/nextjs';

interface EventFormData {
  title: string;
  description: string;
  date: string;
  time: string;
  location: string;
  guests: string;
}

function EditEventPageLoading() {
  return (
    <div className="max-w-2xl mx-auto p-6">
      <div className="animate-pulse">
        <div className="h-8 bg-gray-200 rounded w-1/4 mb-8"></div>
        <div className="space-y-6">
          {[1, 2, 3, 4, 5].map((i) => (
            <div key={i} className="h-10 bg-gray-200 rounded"></div>
          ))}
        </div>
      </div>
    </div>
  );
}

// Wrapper component
export default function EditEventPageWrapper({
  params
}: {
  params: { eventId: string }
}) {
  return (
    <Suspense fallback={<EditEventPageLoading />}>
      <ClerkProvider dynamic>
        <EditEventPage params={Promise.resolve(params)} />
      </ClerkProvider>
    </Suspense>
  );
}


function  EditEventPage( {
  params,
}: {
  params: Promise<{ eventId: string }>;
}) {
  const router = useRouter();
  const { getToken } = useAuth();
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const unwrappedParams = use(params);
  
  const [formData, setFormData] = useState<EventFormData>({
    title: '',
    description: '',
    date: '',
    time: '',
    location: '',
    guests: ''
  });

  useEffect(() => {
    async function fetchEvent() {
      try {
        const token = await getToken();
        const response = await fetch(`/api/events/${unwrappedParams.eventId}`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (!response.ok) {
          throw new Error('Failed to fetch event');
        }

        const event = await response.json();
        setFormData({
          title: event?.title,
          description: event.description,
          date: new Date(event.date).toISOString().split('T')[0],
          time: event.time,
          location: event.location,
          guests: event.guests.map((g: { email: string }) => g.email).join(', ')
        });
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load event');
      } finally {
        setIsLoading(false);
      }
    }

    fetchEvent();
  }, [unwrappedParams.eventId, getToken]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);

    try {
      const token = await getToken();
      const response = await fetch(`/api/events/${unwrappedParams.eventId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          ...formData,
          guests: formData.guests.split(',').map(email => email.trim())
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to update event');
      }

      router.push('/dashboard/events');
      router.refresh();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Something went wrong');
    } finally {
      setIsSubmitting(false);
    }
  };

  if (isLoading) {
    return (
      <div className="max-w-2xl mx-auto p-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/4 mb-8"></div>
          <div className="space-y-6">
            {[1, 2, 3, 4, 5].map((i) => (
              <div key={i} className="h-10 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }


  return (
    <div className="max-w-2xl mx-auto p-6">
      <div className="mb-8">
        <h1 className="text-2xl font-bold text-gray-900">Edit Event</h1>
      </div>

      {error && (
        <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-md">
          <p className="text-sm text-red-600">{error}</p>
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label htmlFor="title" className="block text-sm font-medium text-black">
            Event Title
          </label>
          <input
            type="text"
            id="title"
            required
            className="mt-1 block w-full text-black rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
            value={formData.title}
            onChange={(e) => setFormData({ ...formData, title: e.target.value })}
          />
        </div>

        <div>
          <label htmlFor="description" className="block text-sm font-medium text-black">
            Description
          </label>
          <textarea
            id="description"
            rows={3}
            className="mt-1 block w-full text-black rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
            value={formData.description}
            onChange={(e) => setFormData({ ...formData, description: e.target.value })}
          />
        </div>

        <div className="grid grid-cols-1 gap-6 sm:grid-cols-2">
          <div>
            <label htmlFor="date" className="block text-sm font-medium text-black">
              Date
            </label>
            <input
              type="date"
              id="date"
              required
              className="mt-1 block w-full text-black rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
              value={formData.date}
              onChange={(e) => setFormData({ ...formData, date: e.target.value })}
            />
          </div>

          <div>
            <label htmlFor="time" className="block text-sm font-medium text-black">
              Time
            </label>
            <input
              type="time"
              id="time"
              required
              className="mt-1 block w-full text-black rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
              value={formData.time}
              onChange={(e) => setFormData({ ...formData, time: e.target.value })}
            />
          </div>
        </div>

        <div>
          <label htmlFor="location" className="block text-sm font-medium text-black">
            Location
          </label>
          <input
            type="text"
            id="location"
            required
            className="mt-1 block w-full text-black rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
            value={formData.location}
            onChange={(e) => setFormData({ ...formData, location: e.target.value })}
          />
        </div>

        <div>
          <label htmlFor="guests" className="block text-sm font-medium text-black">
            Guest Emails
          </label>
          <input
            type="text"
            id="guests"
            placeholder="email1@example.com, email2@example.com"
            className="mt-1 block w-full text-black rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
            value={formData.guests}
            onChange={(e) => setFormData({ ...formData, guests: e.target.value })}
          />
          <p className="mt-1 text-sm text-black">
            Separate multiple email addresses with commas
          </p>
        </div>

        <div className="flex items-center justify-end">
          <button
            type="button"
            className="mr-4 px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-500"
            onClick={() => router.back()}
            disabled={isSubmitting}
          >
            Cancel
          </button>
          <button
            type="submit"
            className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
            disabled={isSubmitting}
          >
            {isSubmitting ? 'Saving...' : 'Save Changes'}
          </button>
        </div>
      </form>
    </div>
  );
}

================
File: src/app/(dashboard)/dashboard/events/[eventId]/loading.tsx
================
export default function LoadingEventPage() {
    return (
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="animate-pulse">
          <div className="mb-8 flex items-center justify-between">
            <div>
              <div className="h-8 bg-gray-200 rounded w-1/4"></div>
              <div className="mt-1 h-4 bg-gray-200 rounded w-1/3"></div>
            </div>
            <div className="flex space-x-3">
              <div className="h-10 w-24 bg-gray-200 rounded"></div>
              <div className="h-10 w-24 bg-gray-200 rounded"></div>
            </div>
          </div>
  
          <div className="bg-white shadow overflow-hidden sm:rounded-lg">
            <div className="px-4 py-5 sm:px-6">
              <div className="h-6 bg-gray-200 rounded w-1/4"></div>
            </div>
            <div className="border-t border-gray-200 px-4 py-5 sm:px-6">
              <div className="grid grid-cols-1 gap-x-4 gap-y-8 sm:grid-cols-2">
                {[1, 2, 3, 4].map((i) => (
                  <div key={i} className="sm:col-span-1">
                    <div className="h-4 bg-gray-200 rounded w-1/4 mb-2"></div>
                    <div className="h-6 bg-gray-200 rounded"></div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

================
File: src/app/(dashboard)/dashboard/events/[eventId]/page.tsx
================
import { auth } from '@clerk/nextjs/server';
import { notFound } from 'next/navigation';
import { Suspense } from 'react';
import EventHeader from '../../../../components/EventHeader';
import EventDetails from '../../../../components/EventDetails';
import GuestList from '../../../../components/GuestList';
import { getEvent } from '../../../../utils/eventUtils';
import GuestManagement from '@/app/components/GuestManagement';
import GuestChat from '@/app/components/GuestChat';

interface PageProps {
  params: Promise<{ eventId: string }>;
}

// Loading component
function EventPageLoading() {
  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="animate-pulse">
        <div className="mb-8">
          <div className="h-8 bg-gray-200 rounded w-1/4"></div>
          <div className="mt-2 h-4 bg-gray-200 rounded w-1/3"></div>
        </div>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2 space-y-6">
            <div className="h-40 bg-gray-200 rounded"></div>
            <div className="h-60 bg-gray-200 rounded"></div>
          </div>
          <div className="space-y-6">
            <div className="h-96 bg-gray-200 rounded"></div>
            <div className="h-48 bg-gray-200 rounded"></div>
          </div>
        </div>
      </div>
    </div>
  );
}

// Main component wrapper
export default function EventPageWrapper({ params }: PageProps) {
  return (
    <Suspense fallback={<EventPageLoading />}>
      <EventPage params={params} />
    </Suspense>
  );
}

// Main component
async function EventPage({ params }: PageProps) {
  const { userId } = await auth();
  const { eventId } = await params;
  
  if (!userId) {
    return null;
  }

  const event = await getEvent(eventId);

  if (!event || event.userId !== userId) {
    notFound();
  }

  const handleGuestUpdate = async (updatedGuests: any) => {
    'use server';
    try {
      await fetch(`/api/events/${eventId}/guests`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ guests: updatedGuests }),
      });
    } catch (error) {
      console.error('Error updating guests:', error);
    }
  };

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <EventHeader event={event} />
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mt-8">
        {/* Main Content */}
        <div className="lg:col-span-2 space-y-8">
          <EventDetails event={event} />

          
          
          <GuestManagement 
            event={event}
            onUpdate={handleGuestUpdate}
          />

          <GuestList 
            guests={event.guests}
            capacity={event.capacity}
            waitlist={event.waitlist}
          />
        </div>

        {/* Sidebar */}
        <div className="space-y-8">
          {/* Guest Chat */}
          <div className="bg-white shadow rounded-lg p-6 text-black">
            <h3 className="text-lg font-medium text-black mb-4">Chat with Guests</h3>
            <GuestChat 
              eventId={event._id!.toString()}
              eventTitle={event.title}
              currentUserEmail={userId}
              guestRole={event.guestRoles}
            />
          </div>

          {/* Event Statistics */}
          <div className="bg-white shadow rounded-lg p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Event Stats</h3>
            <div className="space-y-4">
              <div>
                <p className="text-sm text-gray-500">Total Guests</p>
                <p className="text-2xl font-semibold">{event.guests.length}</p>
              </div>
              <div>
                <p className="text-sm text-gray-500">Accepted</p>
                <p className="text-2xl font-semibold text-green-600">
                  {event.guests.filter(g => g.status === 'accepted').length}
                </p>
              </div>
              {event.capacity && (
                <div>
                  <p className="text-sm text-gray-500">Capacity</p>
                  <p className="text-2xl font-semibold">
                    {event.guests.length}/{event.capacity}
                  </p>
                </div>
              )}
              {event.waitlist && event.waitlist.length > 0 && (
                <div>
                  <p className="text-sm text-gray-500">Waitlist</p>
                  <p className="text-2xl font-semibold text-yellow-600">
                    {event.waitlist.length}
                  </p>
                </div>
              )}
            </div>
          </div>

          {/* Guest Roles */}
          <div className="bg-white shadow rounded-lg p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Event Team</h3>
            <div className="space-y-4">
              {event.guestRoles?.coHosts?.map((email: string) => (
                <div key={email} className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium">{email}</p>
                    <p className="text-xs text-gray-500">Co-Host</p>
                  </div>
                </div>
              ))}
              {event.guestRoles?.moderators?.map((email: string) => (
                <div key={email} className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium">{email}</p>
                    <p className="text-xs text-gray-500">Moderator</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
          

        </div>
      </div>
    </div>
  );
}

================
File: src/app/(dashboard)/dashboard/events/create/loading.tsx
================
export default function LoadingCreateEvent() {
    return (
      <div className="max-w-2xl mx-auto p-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/4 mb-8"></div>
          <div className="space-y-6">
            <div>
              <div className="h-4 bg-gray-200 rounded w-1/4 mb-2"></div>
              <div className="h-10 bg-gray-200 rounded"></div>
            </div>
            <div>
              <div className="h-4 bg-gray-200 rounded w-1/4 mb-2"></div>
              <div className="h-24 bg-gray-200 rounded"></div>
            </div>
            <div className="grid grid-cols-2 gap-6">
              <div>
                <div className="h-4 bg-gray-200 rounded w-1/4 mb-2"></div>
                <div className="h-10 bg-gray-200 rounded"></div>
              </div>
              <div>
                <div className="h-4 bg-gray-200 rounded w-1/4 mb-2"></div>
                <div className="h-10 bg-gray-200 rounded"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

================
File: src/app/(dashboard)/dashboard/events/create/page.tsx
================
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@clerk/nextjs';
import { EVENT_CATEGORIES } from '@/app/types/events';

interface EventFormData {
  title: string;
  description: string;
  date: string;
  time: string;
  location: string;
  guests: string;
  isPublic: boolean;
  category: string;
  tags: string[];
  capacity: string;
  recurrence?: {
    frequency: 'daily' | 'weekly' | 'monthly' | 'yearly';
    interval: string;
    endDate?: string;
    daysOfWeek?: number[];
  };
  template: boolean;
}

const INITIAL_FORM_DATA: EventFormData = {
  title: '',
  description: '',
  date: '',
  time: '',
  location: '',
  guests: '',
  isPublic: false,
  category: 'Other',
  tags: [],
  capacity: '', // Empty string instead of number
  template: false,
  recurrence: {
    frequency: 'daily',
    interval: '1', // String instead of number
    endDate: '',
    daysOfWeek: []
  }
};

export default function CreateEventPage() {
  const router = useRouter();
  const { getToken } = useAuth();  
  const [formData, setFormData] = useState<EventFormData>(INITIAL_FORM_DATA);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);

    try {
      const token = await getToken();

      // Convert string values to numbers before sending to API
      const eventData = {
        ...formData,
        capacity: formData.capacity ? parseInt(formData.capacity) : null,
        guests: formData.guests.split(',').map(email => email.trim()),
        recurrence: formData.recurrence && formData.recurrence.frequency ? {
          ...formData.recurrence,
          interval: parseInt(formData.recurrence.interval || '1')
        } : null
      };
      
      const response = await fetch('/api/events', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(eventData),
      });

      if (!response.ok) {
        throw new Error('Failed to create event');
      }

      router.push('/dashboard/events');
      router.refresh();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Something went wrong');
    } finally {
      setIsSubmitting(false);
    }
  };
  return (
    <div className="max-w-2xl mx-auto p-6">
      <div className="mb-8">
        <h1 className="text-2xl font-bold text-gray-900">Create New Event</h1>
        <p className="mt-2 text-sm text-black">
          Fill in the details below to create your event and invite guests.
        </p>
      </div>

      {error && (
        <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-md">
          <p className="text-sm text-red-600">{error}</p>
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label htmlFor="title" className="block text-sm font-medium text-black">
            Event Title
          </label>
          <input
            type="text"
            id="title"
            required
            className="mt-1 block w-full text-black rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
            value={formData.title}
            onChange={(e) => setFormData({ ...formData, title: e.target.value })}
          />
        </div>

        <div>
          <label htmlFor="description" className="block text-sm font-medium text-black">
            Description
          </label>
          <textarea
            id="description"
            rows={3}
            className="mt-1 block w-full text-black rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
            value={formData.description}
            onChange={(e) => setFormData({ ...formData, description: e.target.value })}
          />
        </div>

        <div className="grid grid-cols-1 gap-6 sm:grid-cols-2">
          <div>
            <label htmlFor="date" className="block text-sm font-medium text-black">
              Date
            </label>
            <input
              type="date"
              id="date"
              required
              className="mt-1 block text-black w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
              value={formData.date}
              onChange={(e) => setFormData({ ...formData, date: e.target.value })}
            />
          </div>

          <div>
            <label htmlFor="time" className="block text-sm font-medium text-black">
              Time
            </label>
            <input
              type="time"
              id="time"
              required
              className="mt-1 block w-full text-black rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
              value={formData.time}
              onChange={(e) => setFormData({ ...formData, time: e.target.value })}
            />
          </div>
        </div>

        <div>
          <label htmlFor="location" className="block text-sm font-medium text-black">
            Location
          </label>
          <input
            type="text"
            id="location"
            required
            className="mt-1 block w-full text-black rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
            value={formData.location}
            onChange={(e) => setFormData({ ...formData, location: e.target.value })}
          />
        </div>

        <div>
          <label htmlFor="guests" className="block text-sm font-medium text-black">
            Guest Emails
          </label>
          <input
            type="text"
            id="guests"
            placeholder="email1@example.com, email2@example.com"
            className="mt-1 block w-full text-black rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
            value={formData.guests}
            onChange={(e) => setFormData({ ...formData, guests: e.target.value })}
          />
          <p className="mt-1 text-sm text-black">
            Separate multiple email addresses with commas
          </p>
        </div>

        <div>
        <label htmlFor="capacity" className="block text-sm font-medium text-black">
          Capacity
        </label>
        <input
          type="number"
          id="capacity"
          min="0"
          className="mt-1 block w-full text-black rounded-md border border-gray-300 px-3 py-2"
          value={formData.capacity}
          onChange={(e) => setFormData({ ...formData, capacity: e.target.value })}
        />
      </div>

      <div>
        <label htmlFor="category" className="block text-sm font-medium text-black">
          Category
        </label>
        <select
          id="category"
          className="mt-1 block w-full text-black rounded-md border border-gray-300 px-3 py-2"
          value={formData.category}
          onChange={(e) => setFormData({ ...formData, category: e.target.value })}
        >
          <option value="Social">Social</option>
          <option value="Business">Business</option>
          <option value="Education">Education</option>
          <option value="Other">Other</option>
        </select>
      </div>

      <div>
        <label htmlFor="tags" className="block text-sm font-medium text-black">
          Tags
        </label>
        <input
          type="text"
          id="tags"
          placeholder="Enter tags separated by commas"
          className="mt-1 block w-full text-black rounded-md border border-gray-300 px-3 py-2"
          value={formData.tags.join(', ')}
          onChange={(e) => setFormData({
            ...formData,
            tags: e.target.value.split(',').map(tag => tag.trim())
          })}
        />
      </div>

      <div className="flex items-center space-x-2">
        <input
          type="checkbox"
          id="isPublic"
          checked={formData.isPublic}
          onChange={(e) => setFormData({ ...formData, isPublic: e.target.checked })}
          className="h-4 w-4 text-blue-600 rounded border-gray-300"
        />
        <label htmlFor="isPublic" className="text-sm text-black">
          Make this event public
        </label>
      </div>

      <div>
        <label htmlFor="recurrence" className="block text-sm font-medium text-black">
          Recurrence
        </label>
        <select
          id="recurrence"
          className="mt-1 block w-full text-black rounded-md border border-gray-300 px-3 py-2"
          value={formData.recurrence?.frequency || 'none'}
          onChange={(e) => {
            const frequency = e.target.value as 'daily' | 'weekly' | 'monthly' | 'yearly' | 'none';
            setFormData({
              ...formData,
              recurrence: frequency === 'none' ? undefined : {
                frequency,
                interval: '1',
                endDate: '',
                daysOfWeek: []
              }
            });
          }}        >
          <option value="none">No recurrence</option>
          <option value="daily">Daily</option>
          <option value="weekly">Weekly</option>
          <option value="monthly">Monthly</option>
          <option value="yearly">Yearly</option>
        </select>
      </div>

      {formData.recurrence && (
        <>
          <div>
            <label htmlFor="interval" className="block text-sm font-medium text-black">
              Repeat every
            </label>
            <input
              type="number"
              id="interval"
              min="1"
              className="mt-1 block w-full text-black rounded-md border border-gray-300 px-3 py-2"
              value={formData.recurrence.interval}
              onChange={(e) => setFormData({
                ...formData,
                recurrence: {
                  ...formData.recurrence!,
                  interval: e.target.value
                }
              })}
            />
          </div>

          <div>
            <label htmlFor="endDate" className="block text-sm font-medium text-black">
              End Date
            </label>
            <input
              type="date"
              id="endDate"
              className="mt-1 block w-full text-black rounded-md border border-gray-300 px-3 py-2"
              value={formData.recurrence.endDate}
              onChange={(e) => setFormData({
                ...formData,
                recurrence: {
                  ...formData.recurrence!,
                  endDate: e.target.value
                }
              })}
            />
          </div>
        </>
      )}

        <div className="flex items-center justify-end ">
          <button
            type="button"
            className="mr-4 px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-500"
            onClick={() => router.back()}
            disabled={isSubmitting}
          >
            Cancel
          </button>
          <button
            type="submit"
            className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
            disabled={isSubmitting}
          >
            {isSubmitting ? 'Creating...' : 'Create Event'}
          </button>
        </div>
      </form>
    </div>
  );
}

================
File: src/app/(dashboard)/dashboard/events/page.tsx
================
import { auth } from '@clerk/nextjs/server';
import Link from 'next/link';
import clientPromise from '@/app/lib/mongodb';
import { Event } from '@/app/types/events';
import { WithId, Document } from 'mongodb';

async function getEvents(userId: string) {
  try {
    const client = await clientPromise;
    const db = client.db('feest');
    
    const events = await db
      .collection('events')
      .find({ userId })
      .sort({ date: -1 })
      .toArray();

    return events.map((event) => ({
      _id: event._id.toString(),
      title: event.title,
      description: event.description,
      date: event.date,
      time: event.time,
      location: event.location,
      guests: event.guests,
      userId: event.userId,
      createdAt: event.createdAt,
      updatedAt: event.updatedAt
    })) as Event[];
  } catch (error) {
    console.error('Error fetching events:', error);
    return [];
  }
}

export default async function EventsPage() {
  const { userId } = await auth();

  if (!userId) {
    return null;
  }

  const events = await getEvents(userId);

  return (
    <div className="mx-auto px-4 sm:px-6 lg:px-8 py-8 bg-gradient-to-tr from-blue-400 to-purple-300 w-full min-h-screen">
      <div className="sm:flex sm:items-center">
        <div className="sm:flex-auto">
          <h1 className="text-2xl font-semibold text-gray-900">Events</h1>
          <p className="mt-2 text-sm text-gray-700">
            A list of all events you've created and organized.
          </p>
        </div>
        <div className="mt-4 sm:mt-0 sm:ml-16 sm:flex-none">
          <Link
            href="/dashboard/events/create"
            className="inline-flex items-center justify-center rounded-md border border-transparent px-4 py-2 text-sm font-medium text-white shadow-sm focus:outline-none sm:w-auto bg-gradient-to-tr from-blue-500 to-purple-500"
          >
            Create Event
          </Link>
        </div>
      </div>

      <div className="mt-8 flex flex-col">
        <div className="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
          <div className="inline-block min-w-full py-2 align-middle">
            <div className="overflow-hidden shadow-sm ring-1 ring-black ring-opacity-5">
              <table className="min-w-full divide-y divide-gray-300">
                <thead className="bg-gradient-to-tr from-blue-500 to-purple-500">
                  <tr>
                    <th scope="col" className="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-white sm:pl-6 lg:pl-8">
                      Event Name
                    </th>
                    <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-white">
                      Date
                    </th>
                    <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-white">
                      Location
                    </th>
                    <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-white">
                      Guests
                    </th>
                    <th scope="col" className="relative py-3.5 pl-3 pr-4 sm:pr-6 lg:pr-8">
                      <span className="sr-only">Actions</span>
                    </th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200 bg-white">
                  {events.length === 0 ? (
                    <tr>
                      <td colSpan={5} className="px-6 py-4 text-center text-sm text-gray-500">
                        No events found. Create your first event!
                      </td>
                    </tr>
                  ) : (
                    events.map((event: Event) => (
                      <tr key={event._id} className="hover:bg-gray-50">
                        <td className="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6 lg:pl-8">
                          {event.title}
                        </td>
                        <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                          {new Date(event.date).toLocaleDateString()}
                        </td>
                        <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                          {event.location}
                        </td>
                        <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                          {event.guests?.length || 0} guests
                        </td>
                        <td className="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6 lg:pr-8">
                          <Link
                            href={`/dashboard/events/${event._id}`}
                            className="text-blue-600 hover:text-blue-900 mr-4"
                          >
                            View
                          </Link>
                          <Link
                            href={`/dashboard/events/${event._id}/edit`}
                            className="text-blue-600 hover:text-blue-900"
                          >
                            Edit
                          </Link>
                        </td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/(dashboard)/dashboard/invite/[eventId]/[response]/page.tsx
================
import { redirect } from 'next/navigation';
import { ObjectId } from 'mongodb';
import clientPromise from '@/app/lib/mongodb';

export default async function RSVPPage({ 
  params 
}: { 
  params: { eventId: string; response: 'accept' | 'decline'; email: string } 
}) {
  const { eventId, response, email } = params;

  try {
    const client = await clientPromise;
    const db = client.db('feest');

    // Update guest status
    await db.collection('events').updateOne(
      {
        _id: new ObjectId(eventId),
        'guests.email': decodeURIComponent(email)
      },
      {
        $set: {
          'guests.$.status': response,
          'guests.$.respondedAt': new Date()
        }
      }
    );

    // Redirect to a thank you page
    redirect(`/invite/${eventId}/thank-you`);
  } catch (error) {
    console.error('Error updating RSVP:', error);
    redirect('/error');
  }
}

================
File: src/app/(dashboard)/dashboard/invite/[eventId]/thank-you/page.tsx
================
import Link from 'next/link';
import { getEvent } from '@/app/utils/eventUtils';

export default async function ThankYouPage({ 
  params 
}: { 
  params: { eventId: string } 
}) {
  const event = await getEvent(params.eventId);

  if (!event) {
    return <div>Event not found</div>;
  }

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8 text-center">
        <h1 className="text-3xl font-extrabold">Thank You!</h1>
        <p className="mt-2 text-gray-600">
          Your response for {event.title} has been recorded.
        </p>
        <div className="mt-4">
          <Link
            href={`/events/${event._id}`}
            className="text-blue-600 hover:text-blue-500"
          >
            View Event Details
          </Link>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/(dashboard)/dashboard/settings/page.tsx
================
'use client';

import { useState } from 'react';
import { useUser } from '@clerk/nextjs';
import { useRouter } from 'next/navigation';

interface NotificationSettings {
  emailNotifications: boolean;
  eventReminders: boolean;
  guestUpdates: boolean;
}

interface UserPreferences {
  timezone: string;
  dateFormat: '12h' | '24h';
  language: string;
}

export default function SettingsPage() {
  const { user } = useUser();
  const router = useRouter();
  const [isSaving, setIsSaving] = useState(false);
  const [notifications, setNotifications] = useState<NotificationSettings>({
    emailNotifications: true,
    eventReminders: true,
    guestUpdates: true,
  });
  
  const [preferences, setPreferences] = useState<UserPreferences>({
    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
    dateFormat: '12h',
    language: 'en',
  });

  const handleNotificationChange = (setting: keyof NotificationSettings) => {
    setNotifications(prev => ({
      ...prev,
      [setting]: !prev[setting]
    }));
  };

  const handlePreferenceChange = (
    setting: keyof UserPreferences,
    value: string
  ) => {
    setPreferences(prev => ({
      ...prev,
      [setting]: value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSaving(true);

    try {
      const response = await fetch('/api/settings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          notifications,
          preferences,
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to save settings');
      }

      router.refresh();
    } catch (error) {
      console.error('Error saving settings:', error);
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="mx-auto px-4 sm:px-6 lg:px-8 py-8 bg-gradient-to-tr from-blue-400 to-purple-300 text-black">
      <div className="space-y-8 ">
        {/* Profile Section */}
        <div>
          <h2 className="text-2xl font-bold text-gray-900 mb-6 ">Profile Settings</h2>
          <div className="bg-white shadow rounded-lg p-6">
            <div className="flex items-center space-x-6">
              <div className="h-24 w-24 rounded-full overflow-hidden">
                <img
                  src={user?.imageUrl}
                  alt="Profile"
                  className="h-full w-full object-cover"
                />
              </div>
              <div>
                <h3 className="text-lg font-medium text-gray-900">{user?.fullName}</h3>
                <p className="text-sm text-gray-500">{user?.primaryEmailAddress?.emailAddress}</p>
              </div>
            </div>
          </div>
        </div>

        <form onSubmit={handleSubmit}>
          {/* Notification Settings */}
          <div className="bg-white shadow rounded-lg p-6 mb-6 text-black">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Notifications</h3>
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div>
                  <label className="font-medium text-gray-700">Email Notifications</label>
                  <p className="text-sm text-gray-500">Receive emails about your events</p>
                </div>
                <button
                  type="button"
                  onClick={() => handleNotificationChange('emailNotifications')}
                  className={`${
                    notifications.emailNotifications ? 'bg-blue-600' : 'bg-gray-200'
                  } relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full transition-colors duration-200 ease-in-out`}
                >
                  <span
                    className={`${
                      notifications.emailNotifications ? 'translate-x-6' : 'translate-x-1'
                    } inline-block h-4 w-4 transform rounded-full bg-white transition duration-200 ease-in-out mt-1`}
                  />
                </button>
              </div>

              <div className="flex items-center justify-between">
                <div>
                  <label className="font-medium text-gray-700">Event Reminders</label>
                  <p className="text-sm text-gray-500">Get reminded about upcoming events</p>
                </div>
                <button
                  type="button"
                  onClick={() => handleNotificationChange('eventReminders')}
                  className={`${
                    notifications.eventReminders ? 'bg-blue-600' : 'bg-gray-200'
                  } relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full transition-colors duration-200 ease-in-out`}
                >
                  <span
                    className={`${
                      notifications.eventReminders ? 'translate-x-6' : 'translate-x-1'
                    } inline-block h-4 w-4 transform rounded-full bg-white transition duration-200 ease-in-out mt-1`}
                  />
                </button>
              </div>
            </div>
          </div>

          {/* Preferences */}
          <div className="bg-white shadow rounded-lg p-6 mb-6 text-black">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Preferences</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">Timezone</label>
                <select
                  value={preferences.timezone}
                  onChange={(e) => handlePreferenceChange('timezone', e.target.value)}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                >
                  <option value="UTC">UTC</option>
                  <option value="America/New_York">Eastern Time</option>
                  <option value="America/Los_Angeles">Pacific Time</option>
                  <option value="Europe/London">London</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Date Format</label>
                <select
                  value={preferences.dateFormat}
                  onChange={(e) => handlePreferenceChange('dateFormat', e.target.value as '12h' | '24h')}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                >
                  <option value="12h">12-hour</option>
                  <option value="24h">24-hour</option>
                </select>
              </div>
            </div>
          </div>

          {/* Submit Button */}
          <div className="flex justify-end">
            <button
              type="submit"
              disabled={isSaving}
              className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
            >
              {isSaving ? 'Saving...' : 'Save Settings'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

================
File: src/app/(dashboard)/dashboard/page.tsx
================
import { auth } from '@clerk/nextjs/server';
import { redirect } from 'next/navigation';
import Link from 'next/link';
import clientPromise from '@/app/lib/mongodb';
import { Event } from '@/app/types/events';

async function getUpcomingEvents(userId: string) {
  try {
    const client = await clientPromise;
    const db = client.db('feest');
    
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const events = await db
      .collection('events')
      .find({
        userId,
        date: { $gte: today }
      })
      .sort({ date: 1 })
      .limit(5)
      .toArray();

    return events;
  } catch (error) {
    console.error('Error fetching upcoming events:', error);
    return [];
  }
}

async function getRecentActivity(userId: string) {
  try {
    const client = await clientPromise;
    const db = client.db('feest');
    
    const activities = await db
      .collection('events')
      .find({ userId })
      .sort({ createdAt: -1 })
      .limit(5)
      .toArray();

    return activities;
  } catch (error) {
    console.error('Error fetching recent activity:', error);
    return [];
  }
}

export default async function DashboardPage() {
  const { userId } = await auth();

  if (!userId) {
    redirect('/sign-in');
  }

  const upcomingEvents = await getUpcomingEvents(userId);
  const recentActivity = await getRecentActivity(userId);

  return (
    <div className="mx-auto px-4 sm:px-6 lg:px-8 py-8 bg-gradient-to-tr from-blue-400 to-purple-300 text-white min-h-screen">
      <h1 className="text-2xl font-bold mb-6">Dashboard</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {/* Quick Actions Card */}
        <div className="bg-white text-black rounded-lg shadow p-6">
          <h2 className="text-lg font-semibold mb-4">Quick Actions</h2>
          <div className="space-y-4">
            <Link
              href="/dashboard/events/create"
              className="block w-full text-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-black bg-blue-400 hover:bg-blue-700"
            >
              Create New Event
            </Link>
            <Link
              href="/dashboard/events"
              className="block w-full text-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-black hover:bg-gray-50"
            >
              View All Events
            </Link>
          </div>
        </div>

        {/* Upcoming Events Card */}
        <div className="bg-white rounded-lg shadow p-6 text-black">
          <h2 className="text-lg font-semibold mb-4">Upcoming Events</h2>
          <div className="space-y-3">
            {upcomingEvents.length === 0 ? (
              <p className="text-gray-500 text-sm">No upcoming events</p>
            ) : (
              upcomingEvents.map((event) => (
                <Link
                  key={(event._id).toString()}
                  href={`/dashboard/events/${event._id}`}
                  className="block p-3 rounded-md hover:bg-gray-50 transition-colors"
                >
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="font-medium text-gray-900">{event.title}</h3>
                      <p className="text-sm text-gray-500">{event.location}</p>
                    </div>
                    <div className="text-sm text-gray-500">
                      {new Date(event.date).toLocaleDateString()}
                    </div>
                  </div>
                  <div className="mt-1 text-sm text-gray-500">
                    {event.guests?.length || 0} guests
                  </div>
                </Link>
              ))
            )}
          </div>
          {upcomingEvents.length > 0 && (
            <Link
              href="/dashboard/events"
              className="block mt-4 text-sm text-blue-600 hover:text-blue-800"
            >
              View all events →
            </Link>
          )}
        </div>

        {/* Recent Activity Card */}
        <div className="bg-white rounded-lg shadow p-6 text-black">
          <h2 className="text-lg font-semibold mb-4">Recent Activity</h2>
          <div className="space-y-3">
            {recentActivity.length === 0 ? (
              <p className="text-gray-500 text-sm">No recent activity</p>
            ) : (
              recentActivity.map((activity) => (
                <div
                  key={(activity._id).toString()}
                  className="flex items-center space-x-3 p-2 rounded-md hover:bg-gray-50"
                >
                  <div className="flex-1">
                    <p className="text-sm font-medium text-gray-900">
                      {activity.title}
                    </p>
                    <p className="text-sm text-gray-500">
                      Created on {new Date(activity.createdAt).toLocaleDateString()}
                    </p>
                  </div>
                  <Link
                    href={`/dashboard/events/${activity._id}`}
                    className="text-sm text-blue-600 hover:text-blue-800"
                  >
                    View
                  </Link>
                </div>
              ))
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/(dashboard)/layout.tsx
================
import { auth } from '@clerk/nextjs/server';
import { redirect } from 'next/navigation';
import { SignOutButton, UserButton } from '@clerk/nextjs';
import Link from 'next/link';

export default async function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const { userId } = await auth();

  if (!userId) {
    redirect('/sign-in');
  }

  return (
    <div className="min-h-screen bg-gray-50 ">        
      <nav className="shadow-sm bg-gradient-to-tr from-purple-500 to-blue-500 text-black">
        <div className="mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <img src="/images/logo.svg" alt="logo" className="h-12 mr-20" />
            <div className="flex">
              <Link 
                href="/dashboard" 
                className="flex items-center px-2 text-black font-semibold text-md"
              >
                Dashboard
              </Link>
              <div className="hidden sm:ml-6 sm:flex sm:space-x-8">
                <Link
                  href="/dashboard/events"
                  className="inline-flex items-center px-1 pt-1 text-md font-medium text-black hover:text-gray-900"
                >
                  Events
                </Link>
                <Link
                  href="/dashboard/settings"
                  className="inline-flex items-center px-1 pt-1 text-md font-medium text-black hover:text-gray-900"
                >
                  Settings
                </Link>
              </div>
            </div>
            <div className="flex items-center">
              {/* <UserButton signOutForceRedirectUrl="/" /> */}
              <SignOutButton />
            </div>
          </div>
        </div>
      </nav>
      <main>{children}</main>
    </div>
  );
}

================
File: src/app/api/events/[eventId]/guests/route.ts
================
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import clientPromise from '@/app/lib/mongodb';
import { ObjectId } from 'mongodb';

export async function PATCH(
  request: Request,
  { params }: { params: { eventId: string } }
) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const data = await request.json();
    const client = await clientPromise;
    const db = client.db('feest');

    const result = await db.collection('events').updateOne(
      { _id: new ObjectId(params.eventId), userId },
      {
        $set: {
          guests: data.guests,
          updatedAt: new Date()
        }
      }
    );

    if (result.modifiedCount === 0) {
      return NextResponse.json(
        { error: 'Failed to update guests' },
        { status: 400 }
      );
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error updating guests:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    );
  }
}

================
File: src/app/api/events/[eventId]/messages/route.ts
================
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import clientPromise from '@/app/lib/mongodb';
import { ObjectId } from 'mongodb';

export async function GET(
  request: Request,
  { params }: { params: { eventId: string } }
) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const eventId = params.eventId;

    const client = await clientPromise;
    const db = client.db('feest');

    // Verify user has access to this event
    const event = await db.collection('events').findOne({
      _id: new ObjectId(params.eventId),
      $or: [
        { userId },
        { 'guests.email': userId },
        { 'guestRoles.coHosts': userId },
        { 'guestRoles.moderators': userId }
      ]
    });

    if (!event) {
      return NextResponse.json({ error: 'Event not found' }, { status: 404 });
    }

    const messages = await db
      .collection('event_messages')
      .find({ eventId: new ObjectId(params.eventId) })
      .sort({ timestamp: 1 })
      .toArray();

    return NextResponse.json(messages);
  } catch (error) {
    console.error('Error fetching messages:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    );
  }
}

export async function POST(
  request: Request,
  { params }: { params: { eventId: string } }
) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const eventId = params.eventId;

    const { content, group = 'all' } = await request.json();

    const client = await clientPromise;
    const db = client.db('feest');

    // Verify user has access to this event
    const event = await db.collection('events').findOne({
      _id: new ObjectId(params.eventId),
      $or: [
        { userId },
        { 'guests.email': userId },
        { 'guestRoles.coHosts': userId },
        { 'guestRoles.moderators': userId }
      ]
    });

    if (!event) {
      return NextResponse.json({ error: 'Event not found' }, { status: 404 });
    }

    

    const message = {
      eventId: new ObjectId(params.eventId),
      senderId: userId,
      content,
      group,
      timestamp: new Date()
    };

    await db.collection('event_messages').insertOne(message);

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error sending message:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    );
  }
}

================
File: src/app/api/events/[eventId]/route.ts
================
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import clientPromise from '@/app/lib/mongodb';
import { ObjectId } from 'mongodb';

export async function GET(
  request: Request,
  { params }: { params: Promise<{ eventId: string }> }
) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Await the params object before accessing its properties
    const { eventId } = await params;

    const client = await clientPromise;
    const db = client.db('feest');
    
    const event = await db.collection('events').findOne({
      _id: new ObjectId(eventId),
      userId
    });

    if (!event) {
      return NextResponse.json({ error: 'Event not found' }, { status: 404 });
    }

    return NextResponse.json(event);
  } catch (error) {
    console.error('Error fetching event:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    );
  }
}

export async function PATCH(
  request: Request,
  { params }: { params: Promise<{ eventId: string }> }
) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { eventId } = await params;
    const data = await request.json();
    
    const client = await clientPromise;
    const db = client.db('feest');

    const event = await db.collection('events').findOne({
      _id: new ObjectId(eventId),
      userId
    });

    if (!event) {
      return NextResponse.json({ error: 'Event not found' }, { status: 404 });
    }

    const result = await db.collection('events').updateOne(
      { _id: new ObjectId(eventId) },
      {
        $set: {
          ...data,
          updatedAt: new Date()
        }
      }
    );

    if (result.modifiedCount === 0) {
      return NextResponse.json(
        { error: 'Failed to update event' },
        { status: 400 }
      );
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error updating event:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: Request,
  { params }: { params: Promise<{ eventId: string }> }
) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const { eventId } = await params;
    
    const client = await clientPromise;
    const db = client.db('feest');

    const result = await db.collection('events').deleteOne({
      _id: new ObjectId(eventId),
      userId
    });

    if (result.deletedCount === 0) {
      return NextResponse.json(
        { error: 'Event not found or unauthorized' },
        { status: 404 }
      );
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error deleting event:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    );
  }
}

================
File: src/app/api/events/route.ts
================
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import clientPromise from '../../lib/mongodb';
import { Event } from '@/app/types/events';

export async function POST(req: Request) {
  try {
    const { userId } = await auth();

    if (!userId) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const data = await req.json();
    const client = await clientPromise;
    const db = client.db('feest');

    // Validate required fields
    if (!data.title || !data.date || !data.time) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // Handle event capacity
    let guestList = data.guests || [];
    let waitlist: typeof guestList = [];
    
    if (data.capacity && guestList.length > data.capacity) {
      waitlist = guestList.slice(data.capacity);
      guestList = guestList.slice(0, data.capacity);
    }

    const event = {
      ...data,
      userId,
      createdAt: new Date(),
      updatedAt: new Date(),
      status: 'active',
      isTemplate: data.template || false,
      category: data.category || 'Other',
      tags: data.tags || [],
      isPublic: data.isPublic || false,
      capacity: data.capacity || null,
      guests: guestList.map((email: string) => ({
        email,
        status: 'pending',
        invitedAt: new Date(),
        name: ''
      })),
      waitlist: waitlist.map((email: string) => ({
        email,
        status: 'waitlisted',
        invitedAt: new Date(),
        name: ''
      }))
    };

    // Handle recurring events
    if (data.recurrence) {
      const recurringEvents = generateRecurringEvents(event, data.recurrence);
      const result = await db.collection('events').insertMany(recurringEvents);
      return NextResponse.json(
        { ids: result.insertedIds },
        { status: 201 }
      );
    }

    const result = await db.collection('events').insertOne(event);

    return NextResponse.json(
      { id: result.insertedId },
      { status: 201 }
    );
  } catch (error) {
    console.error('Error creating event:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    );
  }
}

export async function GET(req: Request) {
  try {
    const { userId } = await auth();
    const { searchParams } = new URL(req.url);

    if (!userId) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const client = await clientPromise;
    const db = client.db('feest');

    // Build query based on filters
    const query: any = { userId };

    // Category filter
    const category = searchParams.get('category');
    if (category && category !== 'all') {
      query.category = category;
    }

    // Tags filter
    const tags = searchParams.get('tags')?.split(',');
    if (tags && tags.length > 0) {
      query.tags = { $in: tags };
    }

    // Template filter
    const templates = searchParams.get('templates');
    if (templates === 'true') {
      query.isTemplate = true;
    }

    // Privacy filter
    const privacy = searchParams.get('privacy');
    if (privacy) {
      query.isPublic = privacy === 'public';
    }

    const events = await db
      .collection('events')
      .find(query)
      .sort({ date: 1, time: 1 })
      .toArray();

    return NextResponse.json(events);
  } catch (error) {
    console.error('Error fetching events:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    );
  }
}

function generateRecurringEvents(baseEvent: any, recurrence: any) {
  const events = [];
  let currentDate = new Date(baseEvent.date);
  const endDate = new Date(recurrence.endDate);

  while (currentDate <= endDate) {
    // For weekly recurrence, check if the day is included
    if (recurrence.frequency === 'weekly' && recurrence.daysOfWeek) {
      if (!recurrence.daysOfWeek.includes(currentDate.getDay())) {
        currentDate.setDate(currentDate.getDate() + 1);
        continue;
      }
    }

    events.push({
      ...baseEvent,
      date: new Date(currentDate),
      createdAt: new Date(),
      updatedAt: new Date()
    });

    // Increment date based on frequency
    switch (recurrence.frequency) {
      case 'daily':
        currentDate.setDate(currentDate.getDate() + recurrence.interval);
        break;
      case 'weekly':
        currentDate.setDate(currentDate.getDate() + (7 * recurrence.interval));
        break;
      case 'monthly':
        currentDate.setMonth(currentDate.getMonth() + recurrence.interval);
        break;
      case 'yearly':
        currentDate.setFullYear(currentDate.getFullYear() + recurrence.interval);
        break;
    }
  }

  return events;
}

================
File: src/app/api/invitations/[eventId]/rsvp/route.ts
================
// src/app/api/invitations/[eventId]/rsvp/route.ts
import { NextResponse } from 'next/server';
import clientPromise from '@/app/lib/mongodb';
import { ObjectId } from 'mongodb';

export async function POST(
  request: Request,
  { params }: { params: { eventId: string } }
) {
  try {
    const { email, response } = await request.json();

    const client = await clientPromise;
    const db = client.db('feest');

    const result = await db.collection('events').updateOne(
      {
        _id: new ObjectId(params.eventId),
        'guests.email': email
      },
      {
        $set: {
          'guests.$.status': response,
          'guests.$.respondedAt': new Date()
        }
      }
    );

    if (result.modifiedCount === 0) {
      return NextResponse.json(
        { error: 'Invitation not found' },
        { status: 404 }
      );
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error updating RSVP:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    );
  }
}

================
File: src/app/api/invitations/route.ts
================
// src/app/api/invitations/route.ts
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import clientPromise from '@/app/lib/mongodb';
import { Event, Guest } from '@/app/types/events';
import { ObjectId } from 'mongodb';
import { Resend } from 'resend';
import { emailTemplates } from '@/app/lib/email/templates';
import { Document, UpdateFilter } from 'mongodb';

const resend = new Resend(process.env.RESEND_API_KEY);

export async function POST(req: Request) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { eventId, guests } = await req.json();

    const client = await clientPromise;
    const db = client.db('feest');

    // Get event details
    const event = await db.collection('events').findOne({
      _id: new ObjectId(eventId),
      userId
    });

    if (!event) {
      return NextResponse.json({ error: 'Event not found' }, { status: 404 });
    }

    // Create guest objects with proper typing
    const updatedGuests: Guest[] = guests.map((email: string) => ({
      email,
      name: '',
      status: 'pending' as const,
      invitedAt: new Date(),
    }));

    // Update event with new guests using correct MongoDB update syntax
    const updateResult = await db.collection('events').updateOne(
      { _id: new ObjectId(eventId) },
      { 
        $push: { 
          guests: {
            $each: updatedGuests
          } 
        } as UpdateFilter<Document>
      } 
    );

    if (!updateResult.modifiedCount) {
      return NextResponse.json(
        { error: 'Failed to update event' },
        { status: 500 }
      );
    }

    // Convert MongoDB document to Event type for email sending
    const eventForEmail: Event = {
      ...event,
      _id: event._id.toString(),
      guests: event.guests || [],
      createdAt: new Date(event.createdAt),
      updatedAt: new Date(event.updatedAt),
      date: new Date(event.date)
    } as Event;

    // Send invitation emails using Resend
    const emailPromises = updatedGuests.map(guest => 
      resend.emails.send({
        from: process.env.EMAIL_FROM || 'events@yourdomain.com',
        to: guest.email,
        subject: `You're invited to ${event.title}!`,
        html: emailTemplates.eventInvitation(eventForEmail, guest)
      })
    );

    await Promise.all(emailPromises);

    return NextResponse.json({ 
      success: true,
      message: `Successfully invited ${updatedGuests.length} guests`
    });
  } catch (error) {
    console.error('Error sending invitations:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    );
  }
}

================
File: src/app/api/settings/route.ts
================
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import clientPromise from '@/app/lib/mongodb';

export async function POST(req: Request) {
  try {
    const { userId } = await auth();
    
    if (!userId) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const data = await req.json();
    const client = await clientPromise;
    const db = client.db('feest');

    await db.collection('user_settings').updateOne(
      { userId },
      {
        $set: {
          ...data,
          updatedAt: new Date()
        }
      },
      { upsert: true }
    );

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error saving settings:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    );
  }
}

export async function GET(req: Request) {
  try {
    const { userId } = await auth();
    
    if (!userId) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const client = await clientPromise;
    const db = client.db('feest');

    const settings = await db.collection('user_settings').findOne({ userId });

    return NextResponse.json(settings || {});
  } catch (error) {
    console.error('Error fetching settings:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    );
  }
}

================
File: src/app/components/DeleteEventButton.tsx
================
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';

export default function DeleteEventButton({ eventId }: { eventId: string }) {
  const [isDeleting, setIsDeleting] = useState(false);
  const router = useRouter();

  const handleDelete = async () => {
    if (!confirm('Are you sure you want to cancel this event?')) {
      return;
    }

    setIsDeleting(true);
    try {
      const response = await fetch(`/api/events/${eventId}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        router.push('/dashboard/events');
        router.refresh();
      } else {
        throw new Error('Failed to delete event');
      }
    } catch (error) {
      console.error('Error deleting event:', error);
      alert('Failed to delete event');
    } finally {
      setIsDeleting(false);
    }
  };

  return (
    <button
      type="button"
      onClick={handleDelete}
      disabled={isDeleting}
      className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50"
    >
      {isDeleting ? 'Cancelling...' : 'Cancel Event'}
    </button>
  );
}

================
File: src/app/components/EventCalendar.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isToday } from 'date-fns';
import { Event, EVENT_CATEGORIES } from '../types/events';

interface CalendarViewProps {
  events: Event[];
  onEventClick: (event: Event) => void;
  onDateClick: (date: Date) => void;
}

export default function CalendarView({ events, onEventClick, onDateClick }: CalendarViewProps) {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [filteredEvents, setFilteredEvents] = useState<Event[]>(events);
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [selectedTags, setSelectedTags] = useState<string[]>([]);

  const monthStart = startOfMonth(currentDate);
  const monthEnd = endOfMonth(currentDate);
  const daysInMonth = eachDayOfInterval({ start: monthStart, end: monthEnd });

  const handleFilter = () => {
    let filtered = [...events];
    
    if (selectedCategory !== 'all') {
      filtered = filtered.filter(event => event.category === selectedCategory);
    }
    
    if (selectedTags.length > 0) {
      filtered = filtered.filter(event => 
        event.tags.some(tag => selectedTags.includes(tag))
      );
    }
    
    setFilteredEvents(filtered);
  };

  useEffect(() => {
    handleFilter();
  }, [selectedCategory, selectedTags, events]);

  return (
    <div className="bg-white rounded-lg shadow">
      <div className="p-4 border-b flex justify-between items-center">
        <div className="flex space-x-4">
          <select
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
            className="rounded-md border-gray-300"
          >
            <option value="all">All Categories</option>
            {EVENT_CATEGORIES.map(category => (
              <option key={category} value={category}>{category}</option>
            ))}
          </select>
          
          {/* Tags Filter */}
          <div className="flex flex-wrap gap-2">
            {Array.from(new Set(events.flatMap(event => event.tags))).map(tag => (
              <button
                key={tag}
                onClick={() => setSelectedTags(prev => 
                  prev.includes(tag) 
                    ? prev.filter(t => t !== tag)
                    : [...prev, tag]
                )}
                className={`px-2 py-1 rounded-full text-sm ${
                  selectedTags.includes(tag)
                    ? 'bg-blue-500 text-white'
                    : 'bg-gray-100'
                }`}
              >
                {tag}
              </button>
            ))}
          </div>
        </div>
      </div>

      <div className="grid grid-cols-7 gap-px">
        {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
          <div key={day} className="p-2 text-center text-gray-500 text-sm">
            {day}
          </div>
        ))}

        {daysInMonth.map(day => {
          const dayEvents = filteredEvents.filter(event => 
            format(new Date(event.date), 'yyyy-MM-dd') === format(day, 'yyyy-MM-dd')
          );

          return (
            <div
              key={day.toISOString()}
              onClick={() => onDateClick(day)}
              className={`min-h-[100px] p-2 border border-gray-200 ${
                !isSameMonth(day, currentDate) ? 'bg-gray-50' :
                isToday(day) ? 'bg-blue-50' : 'bg-white'
              }`}
            >
              <div className="text-right text-sm text-gray-500">
                {format(day, 'd')}
              </div>
              <div className="mt-2">
                {dayEvents.map(event => (
                  <div
                    key={event._id}
                    onClick={(e) => {
                      e.stopPropagation();
                      onEventClick(event);
                    }}
                    className={`
                      p-1 mb-1 rounded text-sm truncate cursor-pointer
                      ${event.isPublic ? 'bg-blue-100' : 'bg-gray-100'}
                    `}
                  >
                    {event.title}
                    {event.capacity && (
                      <span className="text-xs ml-1">
                        ({event.guests.length}/{event.capacity})
                      </span>
                    )}
                  </div>
                ))}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}

================
File: src/app/components/EventChat.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useUser } from '@clerk/nextjs';

export default function EventChat({ eventId }: { eventId: string }) {
  const { user } = useUser();
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');

  // Implement real-time chat using WebSocket or similar
}

================
File: src/app/components/EventDetails.tsx
================
import { Event } from '@/app/types/events';

export default function EventDetails({ event }: { event: Event }) {
  return (
    <div className="bg-white shadow overflow-hidden sm:rounded-lg">
      <div className="px-4 py-5 sm:px-6">
        <h3 className="text-lg leading-6 font-medium text-gray-900">
          Event Details
        </h3>
      </div>
      <div className="border-t border-gray-200 px-4 py-5 sm:px-6">
        <dl className="grid grid-cols-1 gap-x-4 gap-y-8 sm:grid-cols-2">
          <DetailItem label="Date" value={new Date(event.date).toLocaleDateString()} />
          <DetailItem label="Time" value={event.time} />
          <DetailItem label="Location" value={event.location} />
          <DetailItem label="Description" value={event.description} span={2} />
        </dl>
      </div>
    </div>
  );
}

function DetailItem({ 
  label, 
  value, 
  span = 1 
}: { 
  label: string; 
  value: string; 
  span?: number; 
}) {
  return (
    <div className={`sm:col-span-${span}`}>
      <dt className="text-sm font-medium text-gray-500">{label}</dt>
      <dd className="mt-1 text-sm text-gray-900">{value}</dd>
    </div>
  );
}

================
File: src/app/components/EventHeader.tsx
================
import Link from 'next/link';
import DeleteEventButton from '@/app/components/DeleteEventButton';
import { Event } from '@/app/types/events';

export default function EventHeader({ event }: { event: Event }) {
  return (
    <div className="mb-8 flex items-center justify-between">
      <div>
        <h1 className="text-2xl font-bold text-gray-900">{event.title}</h1>
        <p className="mt-1 text-sm text-gray-500">
          Created on {new Date(event.createdAt).toLocaleDateString()}
        </p>
      </div>
      <div className="flex space-x-3">
        <Link
          href={`/dashboard/events/${event._id}/edit`}
          className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          Edit Event
        </Link>
        <DeleteEventButton eventId={event._id!.toString()} />
      </div>
    </div>
  );
}

================
File: src/app/components/GuestChat.tsx
================
// src/app/components/GuestChat.tsx
'use client';

import { useEffect, useState, useRef } from 'react';
import { Event, Guest, GUEST_ROLES } from '../types/events';

interface Message {
  id: string;
  sender: string;
  content: string;
  timestamp: Date;
  isSystemMessage?: boolean;
}

interface GuestChatProps {
  eventId: string;
  eventTitle: string;
  currentUserEmail: string;
  guestRole?: {
    coHosts?: string[];
    moderators?: string[];
  };
}

export default function GuestChat({ eventId, eventTitle, currentUserEmail, guestRole }: GuestChatProps) {
  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [selectedGroup, setSelectedGroup] = useState<'all' | string>('all');
  const chatEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Here you would typically set up WebSocket connection
    // and load previous messages
    const loadMessages = async () => {
      try {
        const response = await fetch(`/api/events/${eventId}/messages`);
        if (response.ok) {
          const data = await response.json();
          setMessages(data);
        }
      } catch (error) {
        console.error('Error loading messages:', error);
      }
    };

    loadMessages();
  }, [eventId]);

  const canMessageAll = guestRole && 
    (guestRole.coHosts?.includes(currentUserEmail) || 
     guestRole.moderators?.includes(currentUserEmail));

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newMessage.trim()) return;

    const message: Message = {
      id: Date.now().toString(),
      sender: currentUserEmail,
      content: newMessage,
      timestamp: new Date()
    };

    try {
      const response = await fetch(`/api/events/${eventId}/messages`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message,
          group: selectedGroup
        }),
      });

      if (response.ok) {
        setMessages(prev => [...prev, message]);
        setNewMessage('');
        chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
      }
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };

  return (
    <div className="flex flex-col h-[400px] bg-white rounded-lg shadow">
      {/* Chat Header */}
      <div className="p-4 border-b">
        <h3 className="text-lg font-medium text-gray-900">{eventTitle}</h3>
        {canMessageAll && (
          <select
            value={selectedGroup}
            onChange={(e) => setSelectedGroup(e.target.value)}
            className="mt-2 block w-full rounded-md border-gray-300 text-black"
          >
            <option value="all">All Guests</option>
            <option value="co-hosts">Co-Hosts</option>
            <option value="moderators">Moderators</option>
          </select>
        )}
      </div>

      {/* Chat Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4 text-black">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex ${
              message.sender === currentUserEmail ? 'justify-end' : 'justify-start'
            }`}
          >
            <div
              className={`max-w-xs px-4 py-2 rounded-lg ${
                message.sender === currentUserEmail
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-100 text-gray-900'
              }`}
            >
              {message.isSystemMessage ? (
                <p className="text-sm text-black italic ">{message.content}</p>
              ) : (
                <>
                  <p className="text-xs opacity-75 text-black">{message.sender}</p>
                  <p>{message.content}</p>
                  <p className="text-xs opacity-75 text-black">
                    {new Date(message.timestamp).toLocaleTimeString()}
                  </p>
                </>
              )}
            </div>
          </div>
        ))}
        <div ref={chatEndRef} />
      </div>

      {/* Message Input */}
      <form onSubmit={handleSendMessage} className="p-4 border-t">
        <div className="flex space-x-2 mb-10">
          <input
            type="text"
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            placeholder="Type a message..."
            className="flex-1 rounded-md border-gray-300 text-black"
          />          
        </div>
        <button
            type="submit"
            disabled={!newMessage.trim()}
            className="flex px-2 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 item-center justify-center w-full"
        >
            Send
        </button>
        
      </form>
    </div>
  );
}

================
File: src/app/components/GuestList.tsx
================
// src/app/components/GuestList.tsx
import { Guest } from '@/app/types/events';

interface GuestListProps {
  guests: Guest[];
  capacity?: number;
  waitlist?: Guest[];
}

export default function GuestList({ guests, capacity, waitlist }: GuestListProps) {
  return (
    <div className="mt-8">
      <h3 className="text-lg font-medium text-gray-900 mb-4">Guest List</h3>
      <div className="bg-white shadow overflow-hidden sm:rounded-lg">
        {/* Capacity indicator */}
        {capacity && (
          <div className="px-4 py-2 bg-gray-50 border-b border-gray-200">
            <p className="text-sm text-gray-600">
              Capacity: {guests.length}/{capacity} spots filled
            </p>
          </div>
        )}

        {/* Guest List */}
        <ul className="divide-y divide-gray-200">
          {guests.length > 0 ? (
            guests.map((guest) => (
              <GuestListItem key={`${guest.email}-${guest.invitedAt}`} guest={guest} />
            ))
          ) : (
            <EmptyGuestList />
          )}
        </ul>

        {/* Waitlist */}
        {waitlist && waitlist.length > 0 && (
          <div>
            <div className="px-4 py-2 bg-yellow-50 border-t border-yellow-100">
              <h4 className="text-sm font-medium text-yellow-800">Waitlist</h4>
            </div>
            <ul className="divide-y divide-gray-200">
              {waitlist.map((guest) => (
                <GuestListItem 
                  key={`waitlist-${guest.email}-${guest.invitedAt}`} 
                  guest={guest} 
                  isWaitlisted
                />
              ))}
            </ul>
          </div>
        )}
      </div>
    </div>
  );
}

interface GuestListItemProps {
  guest: Guest;
  isWaitlisted?: boolean;
}

function GuestListItem({ guest, isWaitlisted }: GuestListItemProps) {
  const statusStyles = {
    accepted: 'bg-green-100 text-green-800',
    declined: 'bg-red-100 text-red-800',
    pending: 'bg-yellow-100 text-yellow-800'
  };

  return (
    <li className="px-4 py-4">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-gray-900">{guest.email}</p>
          <p className="text-sm text-gray-500">
            Invited on {new Date(guest.invitedAt).toLocaleDateString()}
          </p>
        </div>
        <div className="flex items-center space-x-2">
          {isWaitlisted && (
            <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
              Waitlisted
            </span>
          )}
          <span
            className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
              statusStyles[guest.status]
            }`}
          >
            {guest.status.charAt(0).toUpperCase() + guest.status.slice(1)}
          </span>
        </div>
      </div>
    </li>
  );
}

function EmptyGuestList() {
  return (
    <li className="px-4 py-4 text-sm text-gray-500">
      No guests have been invited yet.
    </li>
  );
}

================
File: src/app/components/GuestManagement.tsx
================
// src/app/components/GuestManagement.tsx
'use client';

import { useState } from 'react';
import { Event, Guest, GUEST_ROLES } from '../types/events';

interface GuestManagementProps {
  event: Event;
  onUpdate: (updatedGuests: Guest[]) => Promise<void>;
}

export default function GuestManagement({ event, onUpdate }: GuestManagementProps) {
  const [selectedGuest, setSelectedGuest] = useState<Guest | null>(null);
  const [isEditing, setIsEditing] = useState(false);

  const handleRoleChange = async (guest: Guest, role: "guest" | "co-host" | "moderator" | undefined) => {
    const updatedGuests = event.guests.map(g => {
      if (g.email === guest.email) {
        return { ...g, role };
      }
      return g;
    });
    await onUpdate(updatedGuests);
  };

  const handleDietaryUpdate = async (guest: Guest, restrictions: string[]) => {
    const updatedGuests = event.guests.map(g => {
      if (g.email === guest.email) {
        return { ...g, dietaryRestrictions: restrictions };
      }
      return g;
    });
    await onUpdate(updatedGuests);
  };

  const handlePlusOneUpdate = async (guest: Guest, plusOneData: Guest['plusOne']) => {
    const updatedGuests = event.guests.map(g => {
      if (g.email === guest.email) {
        return { ...g, plusOne: plusOneData };
      }
      return g;
    });
    await onUpdate(updatedGuests);
  };

  const handleCheckIn = async (guest: Guest) => {
    const updatedGuests = event.guests.map(g => {
      if (g.email === guest.email) {
        return {
          ...g,
          checkedIn: true,
          checkedInAt: new Date()
        };
      }
      return g;
    });
    await onUpdate(updatedGuests);
  };

  return (
    <div className="bg-white shadow rounded-lg divide-y divide-gray-200">
      {/* Guest List */}
      <div className="px-4 py-5 sm:p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Guest Management</h3>
        <div className="space-y-4">
          {event.guests.map((guest, index) => (
            <div
              key={`guest-${guest.email}-${index}`}
              className="flex items-center justify-between p-4 bg-gray-50 rounded-lg"
            >
              <div>
                <h4 className="text-sm font-medium text-gray-900">{guest.name || guest.email}</h4>
                <p className="text-sm text-gray-500">
                  {guest.role ? GUEST_ROLES[guest.role as keyof typeof GUEST_ROLES].label : 'Guest'}
                </p>
              </div>

              <div className="flex items-center space-x-4">
                {/* Role Management */}
                <select
                  value={guest.role || 'guest'}
                  onChange={(e) => handleRoleChange(guest, e.target.value as "guest" | "co-host" | "moderator" | undefined)}
                  className="text-sm rounded-md border-gray-300"
                >
                  {Object.entries(GUEST_ROLES).map(([role, { label }]) => (
                    <option key={`role-${role}`} value={role}>{label}</option>
                  ))}
                </select>

                {/* Dietary Restrictions */}
                <button
                  onClick={() => {
                    setSelectedGuest(guest);
                    setIsEditing(true);
                  }}
                  className="text-sm text-blue-600 hover:text-blue-500"
                >
                  Dietary Preferences
                </button>

                {/* Plus One Management */}
                <button
                  onClick={() => {
                    setSelectedGuest(guest);
                    setIsEditing(true);
                  }}
                  className="text-sm text-blue-600 hover:text-blue-500"
                >
                  Manage Plus One
                </button>

                {/* Check-in Button */}
                <button
                  onClick={() => handleCheckIn(guest)}
                  disabled={guest.checkedIn}
                  className={`px-3 py-1 text-sm rounded-md ${
                    guest.checkedIn
                      ? 'bg-green-100 text-green-800'
                      : 'bg-blue-100 text-blue-800 hover:bg-blue-200'
                  }`}
                >
                  {guest.checkedIn ? 'Checked In' : 'Check In'}
                </button>
              </div>
            </div>
          ))}

          {/* Event Team Section */}
          <div className="mt-8">
            <h4 className="text-lg font-medium text-gray-900 mb-4">Event Team</h4>
            <div className="space-y-4">
              {event.guestRoles?.coHosts?.map((email, index) => (
                <div key={`cohost-${email}-${index}`} className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium">{email}</p>
                    <p className="text-xs text-gray-500">Co-Host</p>
                  </div>
                </div>
              ))}
              {event.guestRoles?.moderators?.map((email, index) => (
                <div key={`moderator-${email}-${index}`} className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium">{email}</p>
                    <p className="text-xs text-gray-500">Moderator</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Dietary Preferences Modal */}
      {isEditing && selectedGuest && (
        <DietaryPreferencesModal
          guest={selectedGuest}
          onClose={() => {
            setIsEditing(false);
            setSelectedGuest(null);
          }}
          onSave={async (restrictions) => {
            await handleDietaryUpdate(selectedGuest, restrictions);
            setIsEditing(false);
            setSelectedGuest(null);
          }}
        />
      )}
    </div>
  );
}

interface DietaryPreferencesModalProps {
  guest: Guest;
  onClose: () => void;
  onSave: (restrictions: string[]) => Promise<void>;
}

function DietaryPreferencesModal({ guest, onClose, onSave }: DietaryPreferencesModalProps) {
  const [selectedRestrictions, setSelectedRestrictions] = useState<string[]>(
    guest.dietaryRestrictions || []
  );

  const DIETARY_RESTRICTIONS = [
    'Vegetarian',
    'Vegan',
    'Gluten-Free',
    'Dairy-Free',
    'Nut-Free',
    'Halal',
    'Kosher',
    'Other'
  ];

  return (
    <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center">
      <div className="bg-white rounded-lg p-6 max-w-md w-full">
        <h3 className="text-lg font-medium mb-4">Dietary Preferences</h3>
        <div className="space-y-2">
          {DIETARY_RESTRICTIONS.map((restriction) => (
            <label key={`restriction-${restriction}`} className="flex items-center">
              <input
                type="checkbox"
                checked={selectedRestrictions.includes(restriction)}
                onChange={(e) => {
                  if (e.target.checked) {
                    setSelectedRestrictions([...selectedRestrictions, restriction]);
                  } else {
                    setSelectedRestrictions(
                      selectedRestrictions.filter((r) => r !== restriction)
                    );
                  }
                }}
                className="mr-2"
              />
              {restriction}
            </label>
          ))}
        </div>
        <div className="mt-4 flex justify-end space-x-2">
          <button
            onClick={onClose}
            className="px-4 py-2 text-sm text-gray-700 hover:text-gray-500"
          >
            Cancel
          </button>
          <button
            onClick={() => onSave(selectedRestrictions)}
            className="px-4 py-2 bg-blue-600 text-white text-sm rounded hover:bg-blue-700"
          >
            Save
          </button>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/components/InviteGuests.tsx
================
'use client';

import { useState } from 'react';
import { useAuth } from '@clerk/nextjs';

interface InviteGuestsProps {
  eventId: string;
  onInviteSuccess?: () => void;
}

export default function InviteGuests({ eventId, onInviteSuccess }: InviteGuestsProps) {
  const [emails, setEmails] = useState<string>('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { getToken } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);

    try {
      const token = await getToken();
      const guestEmails = emails.split(',').map(email => email.trim());

      const response = await fetch('/api/invitations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          eventId,
          guests: guestEmails,
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to send invitations');
      }

      setEmails('');
      if (onInviteSuccess) {
        onInviteSuccess();
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to send invitations');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="bg-white shadow rounded-lg p-6">
      <h3 className="text-lg font-medium text-gray-900 mb-4">Invite Guests</h3>

      {error && (
        <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-md">
          <p className="text-sm text-red-600">{error}</p>
        </div>
      )}

      <form onSubmit={handleSubmit}>
        <div className="mb-4">
          <label htmlFor="emails" className="block text-sm font-medium text-gray-700">
            Email Addresses
          </label>
          <textarea
            id="emails"
            rows={3}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            placeholder="Enter email addresses separated by commas"
            value={emails}
            onChange={(e) => setEmails(e.target.value)}
          />
          <p className="mt-2 text-sm text-gray-500">
            Separate multiple email addresses with commas
          </p>
        </div>

        <button
          type="submit"
          disabled={isSubmitting || !emails.trim()}
          className="w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
        >
          {isSubmitting ? 'Sending Invitations...' : 'Send Invitations'}
        </button>
      </form>
    </div>
  );
}

================
File: src/app/components/SocialShare.tsx
================
'use client';

import { Event } from '@/app/types/events';

interface SocialShareProps {
  event: Event;
  url: string;
}

export default function SocialShare({ event, url }: SocialShareProps) {
  const shareText = `Join me at ${event.title}!`;
  
  const shareLinks = {
    facebook: `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`,
    twitter: `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(url)}`,
    linkedin: `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}`,
  };

  return (
    <div className="flex space-x-4">
      {Object.entries(shareLinks).map(([platform, link]) => (
        <button
          key={platform}
          onClick={() => window.open(link, '_blank', 'width=600,height=400')}
          className="px-4 py-2 rounded-md bg-blue-600 text-white"
        >
          Share on {platform.charAt(0).toUpperCase() + platform.slice(1)}
        </button>
      ))}
    </div>
  );
}

================
File: src/app/components/StatCard.tsx
================
'use client';

interface StatCardProps {
  title: string;
  value: number;
  trend: number;
  format?: 'number' | 'currency' | 'percentage';
}

export default function StatCard({ title, value, trend, format = 'number' }: StatCardProps) {
  const formatValue = (val: number): string => {
    switch (format) {
      case 'currency':
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD'
        }).format(val);
      case 'percentage':
        return `${val.toFixed(1)}%`;
      default:
        return new Intl.NumberFormat('en-US').format(val);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow p-6">
      <h3 className="text-sm font-medium text-gray-500">{title}</h3>
      <div className="mt-2 flex items-baseline">
        <p className="text-2xl font-semibold text-gray-900">
          {formatValue(value)}
        </p>
        <p className={`ml-2 flex items-baseline text-sm font-semibold ${
          trend > 0 ? 'text-green-600' : trend < 0 ? 'text-red-600' : 'text-gray-500'
        }`}>
          {trend > 0 ? '↑' : trend < 0 ? '↓' : '→'}
          {Math.abs(trend).toFixed(1)}%
        </p>
      </div>
    </div>
  );
}

================
File: src/app/components/VenueMap.tsx
================
// src/app/components/VenueMap.tsx
'use client';

import { useEffect, useRef } from 'react';
import { Loader } from '@googlemaps/js-api-loader';
import { Venue } from '@/app/types/events';

export default function VenueMap({ venue }: { venue: Venue }) {
  const mapRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const loader = new Loader({
      apiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_KEY!,
      version: 'weekly',
    });

    loader.load().then((google) => {
      const map = new google.maps.Map(mapRef.current!, {
        center: venue.coordinates,
        zoom: 15,
      });

      new google.maps.Marker({
        position: venue.coordinates,
        map,
        title: venue.name,
      });
    });
  }, [venue]);

  return <div ref={mapRef} className="w-full h-[400px] rounded-lg" />;
}

================
File: src/app/lib/calendar/index.ts
================
import { google } from 'googleapis';
import ical from 'ical-generator';
import { Event } from '@/app/types/events';

export async function addToGoogleCalendar(event: Event, accessToken: string) {
  const calendar = google.calendar({ version: 'v3', auth: accessToken });
  
  const calendarEvent = {
    summary: event.title,
    description: event.description,
    start: {
      dateTime: new Date(event.date).toISOString(),
      timeZone: 'UTC',
    },
    end: {
      dateTime: new Date(event.date).toISOString(),
      timeZone: 'UTC',
    },
    location: event.location,
  };

  try {
    const response = await calendar.events.insert({
      calendarId: 'primary',
      requestBody: calendarEvent,
    });
    return response.data;
  } catch (error) {
    console.error('Error adding to Google Calendar:', error);
    throw error;
  }
}

export function generateICalFile(event: Event) {
  const calendar = ical();
  
  calendar.createEvent({
    start: new Date(event.date),
    end: new Date(event.date),
    summary: event.title,
    description: event.description,
    location: event.location,
  });

  return calendar.toString();
}

================
File: src/app/lib/email/templates.ts
================
import { Event, Guest } from '@/app/types/events';

export const emailTemplates = {
  eventInvitation: (event: Event, guest: Guest) => `
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Event Invitation</title>
      </head>
      <body style="font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 0;">
        <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
          <div style="background-color: #f8fafc; border-radius: 8px; padding: 20px; margin-bottom: 20px;">
            <h1 style="color: #1e293b; margin-bottom: 16px;">You're Invited!</h1>
            <p style="color: #475569; margin-bottom: 24px;">
              You've been invited to attend ${event.title}
            </p>
            
            <div style="background-color: white; border-radius: 8px; padding: 16px; margin-bottom: 24px;">
              <h2 style="color: #1e293b; font-size: 18px; margin-bottom: 16px;">Event Details</h2>
              <p style="color: #475569; margin-bottom: 8px;"><strong>Date:</strong> ${new Date(event.date).toLocaleDateString()}</p>
              <p style="color: #475569; margin-bottom: 8px;"><strong>Time:</strong> ${event.time}</p>
              <p style="color: #475569; margin-bottom: 8px;"><strong>Location:</strong> ${event.location}</p>
            </div>

            <div style="text-align: center;">
              <a href="${process.env.NEXT_PUBLIC_APP_URL}/invite/${event._id}/accept/${encodeURIComponent(guest.email)}"
                 style="display: inline-block; background-color: #2563eb; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 0 8px;">
                Accept
              </a>
              <a href="${process.env.NEXT_PUBLIC_APP_URL}/invite/${event._id}/decline/${encodeURIComponent(guest.email)}"
                 style="display: inline-block; background-color: #dc2626; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 0 8px;">
                Decline
              </a>
            </div>
          </div>
        </div>
      </body>
    </html>
  `,

  eventReminder: (event: Event, guest: Guest) => `
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Event Reminder</title>
      </head>
      <body style="font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 0;">
        <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
          <div style="background-color: #f8fafc; border-radius: 8px; padding: 20px;">
            <h1 style="color: #1e293b; margin-bottom: 16px;">Event Reminder</h1>
            <p style="color: #475569; margin-bottom: 24px;">
              This is a reminder about the upcoming event: ${event.title}
            </p>
            
            <div style="background-color: white; border-radius: 8px; padding: 16px;">
              <h2 style="color: #1e293b; font-size: 18px; margin-bottom: 16px;">Event Details</h2>
              <p style="color: #475569; margin-bottom: 8px;"><strong>Date:</strong> ${new Date(event.date).toLocaleDateString()}</p>
              <p style="color: #475569; margin-bottom: 8px;"><strong>Time:</strong> ${event.time}</p>
              <p style="color: #475569; margin-bottom: 8px;"><strong>Location:</strong> ${event.location}</p>
            </div>
          </div>
        </div>
      </body>
    </html>
  `,

  rsvpConfirmation: (event: Event, guest: Guest, response: 'accepted' | 'declined') => `
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>RSVP Confirmation</title>
      </head>
      <body style="font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 0;">
        <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
          <div style="background-color: #f8fafc; border-radius: 8px; padding: 20px;">
            <h1 style="color: #1e293b; margin-bottom: 16px;">RSVP Confirmation</h1>
            <p style="color: #475569; margin-bottom: 24px;">
              Your RSVP has been recorded as: <strong>${response}</strong>
            </p>
            
            <div style="background-color: white; border-radius: 8px; padding: 16px;">
              <h2 style="color: #1e293b; font-size: 18px; margin-bottom: 16px;">Event Details</h2>
              <p style="color: #475569; margin-bottom: 8px;"><strong>Event:</strong> ${event.title}</p>
              <p style="color: #475569; margin-bottom: 8px;"><strong>Date:</strong> ${new Date(event.date).toLocaleDateString()}</p>
              <p style="color: #475569; margin-bottom: 8px;"><strong>Time:</strong> ${event.time}</p>
              <p style="color: #475569; margin-bottom: 8px;"><strong>Location:</strong> ${event.location}</p>
            </div>
          </div>
        </div>
      </body>
    </html>
  `
};

================
File: src/app/lib/analytics.ts
================
import clientPromise from './mongodb';
import { auth } from '@clerk/nextjs/server';

interface EventStats {
  totalEvents: number;
  eventsTrend: number;
  totalAttendees: number;
  attendeesTrend: number;
  totalRevenue: number;
  revenueTrend: number;
}

export async function getEventStats(): Promise<EventStats> {
  const { userId } = await auth();
  if (!userId) {
    throw new Error('Unauthorized');
  }

  const client = await clientPromise;
  const db = client.db('feest');

  // Get current and previous month dates
  const now = new Date();
  const currentMonthStart = new Date(now.getFullYear(), now.getMonth(), 1);
  const previousMonthStart = new Date(now.getFullYear(), now.getMonth() - 1, 1);

  // Get events for current and previous month
  const [currentMonthEvents, previousMonthEvents] = await Promise.all([
    db.collection('events').find({
      userId,
      createdAt: { $gte: currentMonthStart }
    }).toArray(),
    db.collection('events').find({
      userId,
      createdAt: { 
        $gte: previousMonthStart,
        $lt: currentMonthStart
      }
    }).toArray()
  ]);

  // Calculate total events and trend
  const totalEvents = await db.collection('events').countDocuments({ userId });
  const eventsTrend = calculateTrend(
    currentMonthEvents.length,
    previousMonthEvents.length
  );

  // Calculate attendees stats
  const currentMonthAttendees = currentMonthEvents.reduce(
    (sum, event) => sum + countAcceptedGuests(event), 0
  );
  const previousMonthAttendees = previousMonthEvents.reduce(
    (sum, event) => sum + countAcceptedGuests(event), 0
  );
  const totalAttendees = (await db.collection('events')
    .find({ userId })
    .toArray())
    .reduce((sum, event) => sum + countAcceptedGuests(event), 0);
  const attendeesTrend = calculateTrend(
    currentMonthAttendees,
    previousMonthAttendees
  );

  // Calculate revenue stats (if you have ticket prices)
  const currentMonthRevenue = calculateRevenue(currentMonthEvents);
  const previousMonthRevenue = calculateRevenue(previousMonthEvents);
  const totalRevenue = (await db.collection('events')
    .find({ userId })
    .toArray())
    .reduce((sum, event) => sum + calculateEventRevenue(event), 0);
  const revenueTrend = calculateTrend(
    currentMonthRevenue,
    previousMonthRevenue
  );

  return {
    totalEvents,
    eventsTrend,
    totalAttendees,
    attendeesTrend,
    totalRevenue,
    revenueTrend
  };
}

function calculateTrend(current: number, previous: number): number {
  if (previous === 0) return current > 0 ? 100 : 0;
  return ((current - previous) / previous) * 100;
}

function countAcceptedGuests(event: any): number {
  return event.guests?.filter((guest: any) => guest.status === 'accepted').length || 0;
}

function calculateEventRevenue(event: any): number {
  // If you have ticket pricing, calculate based on your pricing model
  // This is a simple example assuming a fixed price per accepted guest
  const fixedTicketPrice = 10; // Example price
  return countAcceptedGuests(event) * fixedTicketPrice;
}

function calculateRevenue(events: any[]): number {
  return events.reduce((sum, event) => sum + calculateEventRevenue(event), 0);
}

================
File: src/app/lib/db.ts
================
import clientPromise from './mongodb';
import { Event } from '../types/events';
import { ObjectId } from 'mongodb';

export async function getEvents(userId: string) {
  const client = await clientPromise;
  const db = client.db('feest');
  
  return db.collection('events')
    .find({ organizer: userId })
    .sort({ date: 1, time: 1 })
    .toArray();
}

export async function getEvent(eventId: string) {
  const client = await clientPromise;
  const db = client.db('feest');
  
  return db.collection('events')
    .findOne({ _id: new ObjectId(eventId) });
}

export async function updateEvent(eventId: string, data: Partial<Event>) {
  const client = await clientPromise;
  const db = client.db('feest');
  
  return db.collection('events')
    .updateOne(
      { _id: new ObjectId(eventId) },
      { 
        $set: {
          ...data,
          updatedAt: new Date()
        }
      }
    );
}

export async function deleteEvent(eventId: string) {
  const client = await clientPromise;
  const db = client.db('feest');
  
  return db.collection('events')
    .deleteOne({ _id: new ObjectId(eventId) });
}

================
File: src/app/lib/email.ts
================
// src/app/lib/email.ts
import { Resend } from 'resend';
import { Event, Guest } from '../types/events';
import { emailTemplates } from './email/templates';

if (!process.env.RESEND_API_KEY) {
  throw new Error('RESEND_API_KEY is missing in environment variables');
}

const resend = new Resend(process.env.RESEND_API_KEY);

interface EmailOptions {
  to: string;
  subject: string;
  html: string;
  from?: string;
}

export async function sendEmail({ to, subject, html, from }: EmailOptions) {
  try {
    const response = await resend.emails.send({
      from: from || process.env.EMAIL_FROM || 'events@yourdomain.com',
      to,
      subject,
      html
    });

    return { success: true, messageId: response.data?.id };
  } catch (error) {
    console.error('Error sending email:', error);
    throw error;
  }
}

export async function sendEventInvitation(event: Event, guest: Guest) {
  const inviteUrl = `${process.env.NEXT_PUBLIC_APP_URL}/invite/${event._id}`;
  
  return sendEmail({
    to: guest.email,
    subject: `You're invited to ${event.title}!`,
    html: emailTemplates.eventInvitation(event, guest)
  });
}

export async function sendEventReminder(event: Event, guest: Guest) {
  return sendEmail({
    to: guest.email,
    subject: `Reminder: ${event.title} is coming up!`,
    html: emailTemplates.eventReminder(event, guest)
  });
}

export async function sendRSVPConfirmation(event: Event, guest: Guest, response: 'accepted' | 'declined') {
  return sendEmail({
    to: guest.email,
    subject: `RSVP Confirmation: ${event.title}`,
    html: emailTemplates.rsvpConfirmation(event, guest, response)
  });
}

================
File: src/app/lib/mongodb.ts
================
// src/app/lib/mongodb.ts
import { MongoClient } from 'mongodb';

if (!process.env.MONGODB_URI) {
  throw new Error('Invalid/Missing environment variable: "MONGODB_URI"');
}

const uri = process.env.MONGODB_URI;
const options = {};

let client;
let clientPromise: Promise<MongoClient>;

async function createIndexes(client: MongoClient) {
  try {
    const db = client.db('feest');
    
    // Create indexes for the messages collection
    await db.collection('event_messages').createIndexes([
      { key: { eventId: 1, timestamp: 1 } },
      { key: { senderId: 1 } }
    ]);

    // Create indexes for other collections if needed
    await db.collection('events').createIndexes([
      { key: { userId: 1 } },
      { key: { 'guests.email': 1 } }
    ]);

    console.log('MongoDB indexes created successfully');
  } catch (error) {
    console.error('Error creating MongoDB indexes:', error);
  }
}

if (process.env.NODE_ENV === 'development') {
  let globalWithMongo = global as typeof globalThis & {
    _mongoClientPromise?: Promise<MongoClient>
  };

  if (!globalWithMongo._mongoClientPromise) {
    client = new MongoClient(uri, options);
    globalWithMongo._mongoClientPromise = client.connect().then(async (client) => {
      // Create indexes when the connection is established
      await createIndexes(client);
      return client;
    });
  }
  clientPromise = globalWithMongo._mongoClientPromise;
} else {
  client = new MongoClient(uri, options);
  clientPromise = client.connect().then(async (client) => {
    // Create indexes when the connection is established
    await createIndexes(client);
    return client;
  });
}

export default clientPromise;

================
File: src/app/types/events.ts
================
export interface Event {    
    _id?: string;
    title: string;
    description: string;
    date: Date;
    time: string;
    location: string;
    organizer: string;
    userId: string;
    guests: Guest[];
    createdAt: Date;
    updatedAt: Date;
    status: 'draft' | 'published' | 'cancelled' | 'completed';
    capacity: number;
    ticketTypes: TicketType[];
    venue: Venue;
    category: string;
    tags: string[];
    waitlist: Guest[];
    isPublic: any;
    recurrence?: {
        frequency: 'daily' | 'weekly' | 'monthly' | 'yearly';
        interval: number;
        endDate?: Date;
        daysOfWeek?: number[]; // 0-6 for Sunday-Saturday
    };
    template?: boolean;
    guestRoles: {
        coHosts: string[];
        moderators: string[];
    };
    guestPreferences: {
        dietaryRestrictions: boolean;
        plusOne: boolean;
        maxPlusOnes: number;
    };
    checkedInGuests: string[];
}

export interface TicketType {
    name: string;
    price: number;
    quantity: number;
    description: string;
    salesStart: Date;
    salesEnd: Date;
}
  
export interface Venue {
    name: string;
    address: string;
    city: string;
    country: string;
    coordinates: {
        lat: number;
        lng: number;
    };
}
  
export interface Guest {
    email: string;
    name: string;
    status: 'pending' | 'accepted' | 'declined';
    invitedAt: Date;
    respondedAt?: Date;
    role?: 'guest' | 'co-host' | 'moderator';
    dietaryRestrictions?: string[];
    plusOne?: {
        name?: string;
        email?: string;
        dietaryRestrictions?: string[];
        status: 'pending' | 'confirmed';
    };
    checkedIn?: boolean;
    checkedInAt?: Date;
}

export interface EventResponse {
    success: boolean;
    error?: string;
    data?: Event;
}

export const EVENT_CATEGORIES = [
    'Social',
    'Business',
    'Education',
    'Sports',
    'Entertainment',
    'Other'
] as const;

export const DIETARY_RESTRICTIONS = [
    'Vegetarian',
    'Vegan',
    'Gluten-Free',
    'Dairy-Free',
    'Nut-Free',
    'Halal',
    'Kosher',
    'Other'
] as const;

export const GUEST_ROLES = {
    'co-host': {
      label: 'Co-Host',
      permissions: ['manage_guests', 'edit_event', 'message_all']
    },
    'moderator': {
      label: 'Moderator',
      permissions: ['manage_guests', 'message_all']
    },
    'guest': {
      label: 'Guest',
      permissions: ['message_group']
    }
} as const;

export type EventCategory = typeof EVENT_CATEGORIES[number];

================
File: src/app/types/settings.ts
================
export interface UserSettings {
    notifications: {
      emailNotifications: boolean;
      eventReminders: boolean;
      guestUpdates: boolean;
    };
    preferences: {
      timezone: string;
      dateFormat: '12h' | '24h';
      language: string;
    };
    userId: string;
    createdAt: Date;
    updatedAt: Date;
}

================
File: src/app/utils/eventUtils.ts
================
import clientPromise from '@/app/lib/mongodb';
import { Event } from '@/app/types/events';
import { ObjectId } from 'mongodb';

export async function getEvent(eventId: string): Promise<Event | null> {
  try {
    const client = await clientPromise;
    const db = client.db('feest');
    
    const event = await db
      .collection('events')
      .findOne({ _id: new ObjectId(eventId) });

    if (!event) return null;

    return {
      ...event,
      _id: event._id.toString(),
      createdAt: new Date(event.createdAt),
      updatedAt: new Date(event.updatedAt),
      date: new Date(event.date),
      guests: event.guests?.map((guest: any) => ({
        ...guest,
        invitedAt: new Date(guest.invitedAt),
        respondedAt: guest.respondedAt ? new Date(guest.respondedAt) : undefined,
        status: guest.status || 'pending'
      })) || []
    } as Event;
  } catch (error) {
    console.error('Error fetching event:', error);
    return null;
  }
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

================
File: src/app/layout.tsx
================
import { ClerkProvider } from '@clerk/nextjs';
import { Inter } from 'next/font/google';
import './globals.css';

const inter = Inter({ subsets: ['latin'] });

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body className={inter.className}>
          <main className="min-h-screen bg-gray-100">
            {children}
          </main>
        </body>
      </html>
    </ClerkProvider>
  );
}

================
File: src/app/page.tsx
================
import Link from 'next/link';
import { auth } from '@clerk/nextjs/server';

export default async function HomePage() {
  const { userId } = await auth();

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white">
      {/* Navigation */}
      <nav className="fixed w-full bg-white/80 backdrop-blur-md z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex-shrink-0">
              <Link 
                href="/" 
                className="text-2xl font-bold text-blue-600"
              >
                Feest
              </Link>
            </div>
            <div className="flex items-center space-x-4">
              {userId ? (
                <Link
                  href="/dashboard"
                  className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  Dashboard
                </Link>
              ) : (
                <>
                  <Link
                    href="/sign-in"
                    className="text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium"
                  >
                    Sign In
                  </Link>
                  <Link
                    href="/sign-up"
                    className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  >
                    Get Started
                  </Link>
                </>
              )}
            </div>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="pt-32 pb-20 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <div className="text-center">
            <h1 className="text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl">
              <span className="block">Create Memorable</span>
              <span className="block text-blue-600">Events with Ease</span>
            </h1>
            <p className="mt-3 max-w-md mx-auto text-base text-gray-500 sm:text-lg md:mt-5 md:text-xl md:max-w-3xl">
              Plan, organize, and manage your events seamlessly. Send invitations, track RSVPs, 
              and keep your guests updated - all in one place.
            </p>
            <div className="mt-5 max-w-md mx-auto sm:flex sm:justify-center md:mt-8">
              <div className="rounded-md shadow">
                <Link
                  href={userId ? "/dashboard/events/create" : "/sign-up"}
                  className="w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 md:py-4 md:text-lg md:px-10"
                >
                  {userId ? 'Create Event' : 'Start Free'}
                </Link>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-20 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3">
            {/* Feature 1 */}
            <div className="relative p-6 bg-white rounded-xl shadow-sm hover:shadow-md transition-shadow">
              <div className="text-blue-600 mb-4">
                <svg className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </div>
              <h3 className="text-lg font-semibold text-gray-900">Easy Planning</h3>
              <p className="mt-2 text-gray-500">
                Create and manage events with an intuitive interface. Set dates, times, and locations effortlessly.
              </p>
            </div>

            {/* Feature 2 */}
            <div className="relative p-6 bg-white rounded-xl shadow-sm hover:shadow-md transition-shadow">
              <div className="text-blue-600 mb-4">
                <svg className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
              </div>
              <h3 className="text-lg font-semibold text-gray-900">Smart Invitations</h3>
              <p className="mt-2 text-gray-500">
                Send beautiful email invitations and track RSVPs in real-time. Keep your guest list organized.
              </p>
            </div>

            {/* Feature 3 */}
            <div className="relative p-6 bg-white rounded-xl shadow-sm hover:shadow-md transition-shadow">
              <div className="text-blue-600 mb-4">
                <svg className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
                </svg>
              </div>
              <h3 className="text-lg font-semibold text-gray-900">Real-time Updates</h3>
              <p className="mt-2 text-gray-500">
                Keep guests informed with automatic updates and reminders about your event details.
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="bg-blue-600">
        <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:py-16 lg:px-8 lg:flex lg:items-center lg:justify-between">
          <h2 className="text-3xl font-extrabold tracking-tight text-white sm:text-4xl">
            <span className="block">Ready to get started?</span>
            <span className="block text-blue-200">Create your first event today.</span>
          </h2>
          <div className="mt-8 flex lg:mt-0 lg:flex-shrink-0">
            <div className="inline-flex rounded-md shadow">
              <Link
                href={userId ? "/dashboard/events/create" : "/sign-up"}
                className="inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-blue-600 bg-white hover:bg-blue-50"
              >
                {userId ? 'Create Event' : 'Get Started'}
              </Link>
            </div>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-white">
        <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 md:flex md:items-center md:justify-between lg:px-8">
          <div className="flex justify-center space-x-6 md:order-2">
            <Link href="/privacy" className="text-gray-400 hover:text-gray-500">
              Privacy Policy
            </Link>
            <Link href="/terms" className="text-gray-400 hover:text-gray-500">
              Terms of Service
            </Link>
          </div>
          <div className="mt-8 md:mt-0 md:order-1">
            <p className="text-center text-base text-gray-400">
              &copy; {new Date().getFullYear()} Feest. All rights reserved.
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
}

================
File: src/middleware.ts
================
import { clerkMiddleware, ClerkMiddlewareAuth, createRouteMatcher } from "@clerk/nextjs/server";
import { NextRequest, NextResponse } from "next/server";

// Define protected routes using createRouteMatcher
const protectedRoutes = createRouteMatcher([
  "/dashboard(.*)",
  "/events(.*)",
  "/settings(.*)",
  "/api/events(.*)"
]);

export default clerkMiddleware( async (auth, req) => {
  if (protectedRoutes(req)) await auth.protect() 
});

export const config = {
    matcher: [
      // Skip Next.js internals and all static files, unless found in search params
      '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
      // Always run for API routes
      '/(api|trpc)(.*)',
    ],
}

function afterAuth(auth: ClerkMiddlewareAuth, req: NextRequest) {
  throw new Error("Function not implemented.");
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for commiting if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "feest",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@clerk/nextjs": "^6.0.2",
    "@googlemaps/js-api-loader": "^1.16.8",
    "date-fns": "^4.1.0",
    "googleapis": "^144.0.0",
    "ical-generator": "^8.0.1",
    "moment": "^2.30.1",
    "mongodb": "^6.10.0",
    "next": "15.0.2",
    "nodemailer": "^6.9.16",
    "react": "19.0.0-rc-02c0e824-20241028",
    "react-dom": "19.0.0-rc-02c0e824-20241028",
    "resend": "^4.0.1-alpha.0"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/nodemailer": "^6.4.16",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
};
export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
